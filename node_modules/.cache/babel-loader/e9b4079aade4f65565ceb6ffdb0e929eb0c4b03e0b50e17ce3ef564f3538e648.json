{"ast":null,"code":"/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/* eslint-disable max-classes-per-file */\nimport { ERR_INVALID_BYTES, ERR_INVALID_NUMBER, ERR_INVALID_ADDRESS, ERR_INVALID_BLOCK, ERR_INVALID_BOOLEAN, ERR_INVALID_HEX, ERR_INVALID_LARGE_VALUE, ERR_INVALID_NIBBLE_WIDTH, ERR_INVALID_SIZE, ERR_INVALID_STRING, ERR_INVALID_TYPE, ERR_INVALID_TYPE_ABI, ERR_INVALID_UNIT, ERR_INVALID_UNSIGNED_INTEGER } from '../error_codes.js';\nimport { InvalidValueError } from '../web3_error_base.js';\nexport class InvalidBytesError extends InvalidValueError {\n  constructor(value) {\n    super(value, 'can not parse as byte data');\n    this.code = ERR_INVALID_BYTES;\n  }\n}\nexport class InvalidNumberError extends InvalidValueError {\n  constructor(value) {\n    super(value, 'can not parse as number data');\n    this.code = ERR_INVALID_NUMBER;\n  }\n}\nexport class InvalidAddressError extends InvalidValueError {\n  constructor(value) {\n    super(value, 'invalid ethereum address');\n    this.code = ERR_INVALID_ADDRESS;\n  }\n}\nexport class InvalidStringError extends InvalidValueError {\n  constructor(value) {\n    super(value, 'not a valid string');\n    this.code = ERR_INVALID_STRING;\n  }\n}\nexport class InvalidUnitError extends InvalidValueError {\n  constructor(value) {\n    super(value, 'invalid unit');\n    this.code = ERR_INVALID_UNIT;\n  }\n}\nexport class HexProcessingError extends InvalidValueError {\n  constructor(value) {\n    super(value, 'can not be converted to hex');\n    this.code = ERR_INVALID_HEX;\n  }\n}\nexport class NibbleWidthError extends InvalidValueError {\n  constructor(value) {\n    super(value, 'value greater than the nibble width');\n    this.code = ERR_INVALID_NIBBLE_WIDTH;\n  }\n}\nexport class InvalidTypeError extends InvalidValueError {\n  constructor(value) {\n    super(value, 'invalid type, type not supported');\n    this.code = ERR_INVALID_TYPE;\n  }\n}\nexport class InvalidBooleanError extends InvalidValueError {\n  constructor(value) {\n    super(value, 'not a valid boolean.');\n    this.code = ERR_INVALID_BOOLEAN;\n  }\n}\nexport class InvalidUnsignedIntegerError extends InvalidValueError {\n  constructor(value) {\n    super(value, 'not a valid unsigned integer.');\n    this.code = ERR_INVALID_UNSIGNED_INTEGER;\n  }\n}\nexport class InvalidSizeError extends InvalidValueError {\n  constructor(value) {\n    super(value, 'invalid size given.');\n    this.code = ERR_INVALID_SIZE;\n  }\n}\nexport class InvalidLargeValueError extends InvalidValueError {\n  constructor(value) {\n    super(value, 'value is larger than size.');\n    this.code = ERR_INVALID_LARGE_VALUE;\n  }\n}\nexport class InvalidBlockError extends InvalidValueError {\n  constructor(value) {\n    super(value, 'invalid string given');\n    this.code = ERR_INVALID_BLOCK;\n  }\n}\nexport class InvalidTypeAbiInputError extends InvalidValueError {\n  constructor(value) {\n    super(value, 'components found but type is not tuple');\n    this.code = ERR_INVALID_TYPE_ABI;\n  }\n}","map":{"version":3,"mappings":"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","names":["ERR_INVALID_BYTES","ERR_INVALID_NUMBER","ERR_INVALID_ADDRESS","ERR_INVALID_BLOCK","ERR_INVALID_BOOLEAN","ERR_INVALID_HEX","ERR_INVALID_LARGE_VALUE","ERR_INVALID_NIBBLE_WIDTH","ERR_INVALID_SIZE","ERR_INVALID_STRING","ERR_INVALID_TYPE","ERR_INVALID_TYPE_ABI","ERR_INVALID_UNIT","ERR_INVALID_UNSIGNED_INTEGER","InvalidValueError","InvalidBytesError","constructor","value","InvalidNumberError","InvalidAddressError","InvalidStringError","InvalidUnitError","HexProcessingError","NibbleWidthError","InvalidTypeError","InvalidBooleanError","InvalidUnsignedIntegerError","InvalidSizeError","InvalidLargeValueError","InvalidBlockError","InvalidTypeAbiInputError"],"sources":["C:\\Users\\rockr\\Desktop\\NFT-MARKETPLACE\\node_modules\\web3-errors\\src\\errors\\utils_errors.ts"],"sourcesContent":["/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n/* eslint-disable max-classes-per-file */\n\nimport {\n\tERR_INVALID_BYTES,\n\tERR_INVALID_NUMBER,\n\tERR_INVALID_ADDRESS,\n\tERR_INVALID_BLOCK,\n\tERR_INVALID_BOOLEAN,\n\tERR_INVALID_HEX,\n\tERR_INVALID_LARGE_VALUE,\n\tERR_INVALID_NIBBLE_WIDTH,\n\tERR_INVALID_SIZE,\n\tERR_INVALID_STRING,\n\tERR_INVALID_TYPE,\n\tERR_INVALID_TYPE_ABI,\n\tERR_INVALID_UNIT,\n\tERR_INVALID_UNSIGNED_INTEGER,\n} from '../error_codes.js';\nimport { InvalidValueError } from '../web3_error_base.js';\n\nexport class InvalidBytesError extends InvalidValueError {\n\tpublic code = ERR_INVALID_BYTES;\n\n\tpublic constructor(value: unknown) {\n\t\tsuper(value, 'can not parse as byte data');\n\t}\n}\n\nexport class InvalidNumberError extends InvalidValueError {\n\tpublic code = ERR_INVALID_NUMBER;\n\n\tpublic constructor(value: unknown) {\n\t\tsuper(value, 'can not parse as number data');\n\t}\n}\n\nexport class InvalidAddressError extends InvalidValueError {\n\tpublic code = ERR_INVALID_ADDRESS;\n\n\tpublic constructor(value: unknown) {\n\t\tsuper(value, 'invalid ethereum address');\n\t}\n}\n\nexport class InvalidStringError extends InvalidValueError {\n\tpublic code = ERR_INVALID_STRING;\n\n\tpublic constructor(value: unknown) {\n\t\tsuper(value, 'not a valid string');\n\t}\n}\n\nexport class InvalidUnitError extends InvalidValueError {\n\tpublic code = ERR_INVALID_UNIT;\n\n\tpublic constructor(value: unknown) {\n\t\tsuper(value, 'invalid unit');\n\t}\n}\n\nexport class HexProcessingError extends InvalidValueError {\n\tpublic code = ERR_INVALID_HEX;\n\n\tpublic constructor(value: unknown) {\n\t\tsuper(value, 'can not be converted to hex');\n\t}\n}\n\nexport class NibbleWidthError extends InvalidValueError {\n\tpublic code = ERR_INVALID_NIBBLE_WIDTH;\n\n\tpublic constructor(value: string) {\n\t\tsuper(value, 'value greater than the nibble width');\n\t}\n}\n\nexport class InvalidTypeError extends InvalidValueError {\n\tpublic code = ERR_INVALID_TYPE;\n\n\tpublic constructor(value: unknown) {\n\t\tsuper(value, 'invalid type, type not supported');\n\t}\n}\n\nexport class InvalidBooleanError extends InvalidValueError {\n\tpublic code = ERR_INVALID_BOOLEAN;\n\n\tpublic constructor(value: unknown) {\n\t\tsuper(value, 'not a valid boolean.');\n\t}\n}\n\nexport class InvalidUnsignedIntegerError extends InvalidValueError {\n\tpublic code = ERR_INVALID_UNSIGNED_INTEGER;\n\n\tpublic constructor(value: unknown) {\n\t\tsuper(value, 'not a valid unsigned integer.');\n\t}\n}\n\nexport class InvalidSizeError extends InvalidValueError {\n\tpublic code = ERR_INVALID_SIZE;\n\n\tpublic constructor(value: unknown) {\n\t\tsuper(value, 'invalid size given.');\n\t}\n}\n\nexport class InvalidLargeValueError extends InvalidValueError {\n\tpublic code = ERR_INVALID_LARGE_VALUE;\n\n\tpublic constructor(value: unknown) {\n\t\tsuper(value, 'value is larger than size.');\n\t}\n}\n\nexport class InvalidBlockError extends InvalidValueError {\n\tpublic code = ERR_INVALID_BLOCK;\n\n\tpublic constructor(value: string) {\n\t\tsuper(value, 'invalid string given');\n\t}\n}\n\nexport class InvalidTypeAbiInputError extends InvalidValueError {\n\tpublic code = ERR_INVALID_TYPE_ABI;\n\n\tpublic constructor(value: string) {\n\t\tsuper(value, 'components found but type is not tuple');\n\t}\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}