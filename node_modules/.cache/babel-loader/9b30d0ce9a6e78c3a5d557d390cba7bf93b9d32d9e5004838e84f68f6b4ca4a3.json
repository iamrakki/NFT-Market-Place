{"ast":null,"code":"/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport { BaseWeb3Error } from '../web3_error_base.js';\nimport { ERR_RPC_INTERNAL_ERROR, ERR_RPC_INVALID_INPUT, ERR_RPC_INVALID_JSON, ERR_RPC_INVALID_METHOD, ERR_RPC_INVALID_PARAMS, ERR_RPC_INVALID_REQUEST, ERR_RPC_LIMIT_EXCEEDED, ERR_RPC_MISSING_RESOURCE, ERR_RPC_NOT_SUPPORTED, ERR_RPC_TRANSACTION_REJECTED, ERR_RPC_UNAVAILABLE_RESOURCE, ERR_RPC_UNSUPPORTED_METHOD } from '../error_codes.js';\nimport { RpcErrorMessages, genericRpcErrorMessageTemplate } from './rpc_error_messages.js';\nexport class RpcError extends BaseWeb3Error {\n  constructor(rpcError, message) {\n    super(message !== null && message !== void 0 ? message : genericRpcErrorMessageTemplate.replace('*code*', rpcError.error.code.toString()));\n    this.code = rpcError.error.code;\n    this.id = rpcError.id;\n    this.jsonrpc = rpcError.jsonrpc;\n    this.jsonRpcError = rpcError.error;\n  }\n  toJSON() {\n    return Object.assign(Object.assign({}, super.toJSON()), {\n      error: this.jsonRpcError,\n      id: this.id,\n      jsonRpc: this.jsonrpc\n    });\n  }\n}\nexport class EIP1193ProviderRpcError extends BaseWeb3Error {\n  constructor(code, data) {\n    var _a, _b, _c, _d;\n    if (!code) {\n      // this case should ideally not happen\n      super();\n    } else if ((_a = RpcErrorMessages[code]) === null || _a === void 0 ? void 0 : _a.message) {\n      super(RpcErrorMessages[code].message);\n    } else {\n      // Retrieve the status code object for the given code from the table, by searching through the appropriate range\n      const statusCodeRange = Object.keys(RpcErrorMessages).find(statusCode => typeof statusCode === 'string' && code >= parseInt(statusCode.split('-')[0], 10) && code <= parseInt(statusCode.split('-')[1], 10));\n      super((_c = (_b = RpcErrorMessages[statusCodeRange !== null && statusCodeRange !== void 0 ? statusCodeRange : '']) === null || _b === void 0 ? void 0 : _b.message) !== null && _c !== void 0 ? _c : genericRpcErrorMessageTemplate.replace('*code*', (_d = code === null || code === void 0 ? void 0 : code.toString()) !== null && _d !== void 0 ? _d : '\"\"'));\n    }\n    this.code = code;\n    this.data = data;\n  }\n}\nexport class ParseError extends RpcError {\n  constructor(rpcError) {\n    super(rpcError, RpcErrorMessages[ERR_RPC_INVALID_JSON].message);\n    this.code = ERR_RPC_INVALID_JSON;\n  }\n}\nexport class InvalidRequestError extends RpcError {\n  constructor(rpcError) {\n    super(rpcError, RpcErrorMessages[ERR_RPC_INVALID_REQUEST].message);\n    this.code = ERR_RPC_INVALID_REQUEST;\n  }\n}\nexport class MethodNotFoundError extends RpcError {\n  constructor(rpcError) {\n    super(rpcError, RpcErrorMessages[ERR_RPC_INVALID_METHOD].message);\n    this.code = ERR_RPC_INVALID_METHOD;\n  }\n}\nexport class InvalidParamsError extends RpcError {\n  constructor(rpcError) {\n    super(rpcError, RpcErrorMessages[ERR_RPC_INVALID_PARAMS].message);\n    this.code = ERR_RPC_INVALID_PARAMS;\n  }\n}\nexport class InternalError extends RpcError {\n  constructor(rpcError) {\n    super(rpcError, RpcErrorMessages[ERR_RPC_INTERNAL_ERROR].message);\n    this.code = ERR_RPC_INTERNAL_ERROR;\n  }\n}\nexport class InvalidInputError extends RpcError {\n  constructor(rpcError) {\n    super(rpcError, RpcErrorMessages[ERR_RPC_INVALID_INPUT].message);\n    this.code = ERR_RPC_INVALID_INPUT;\n  }\n}\nexport class MethodNotSupported extends RpcError {\n  constructor(rpcError) {\n    super(rpcError, RpcErrorMessages[ERR_RPC_UNSUPPORTED_METHOD].message);\n    this.code = ERR_RPC_UNSUPPORTED_METHOD;\n  }\n}\nexport class ResourceUnavailableError extends RpcError {\n  constructor(rpcError) {\n    super(rpcError, RpcErrorMessages[ERR_RPC_UNAVAILABLE_RESOURCE].message);\n    this.code = ERR_RPC_UNAVAILABLE_RESOURCE;\n  }\n}\nexport class ResourcesNotFoundError extends RpcError {\n  constructor(rpcError) {\n    super(rpcError, RpcErrorMessages[ERR_RPC_MISSING_RESOURCE].message);\n    this.code = ERR_RPC_MISSING_RESOURCE;\n  }\n}\nexport class VersionNotSupportedError extends RpcError {\n  constructor(rpcError) {\n    super(rpcError, RpcErrorMessages[ERR_RPC_NOT_SUPPORTED].message);\n    this.code = ERR_RPC_NOT_SUPPORTED;\n  }\n}\nexport class TransactionRejectedError extends RpcError {\n  constructor(rpcError) {\n    super(rpcError, RpcErrorMessages[ERR_RPC_TRANSACTION_REJECTED].message);\n    this.code = ERR_RPC_TRANSACTION_REJECTED;\n  }\n}\nexport class LimitExceededError extends RpcError {\n  constructor(rpcError) {\n    super(rpcError, RpcErrorMessages[ERR_RPC_LIMIT_EXCEEDED].message);\n    this.code = ERR_RPC_LIMIT_EXCEEDED;\n  }\n}\nexport const rpcErrorsMap = new Map();\nrpcErrorsMap.set(ERR_RPC_INVALID_JSON, {\n  error: ParseError\n});\nrpcErrorsMap.set(ERR_RPC_INVALID_REQUEST, {\n  error: InvalidRequestError\n});\nrpcErrorsMap.set(ERR_RPC_INVALID_METHOD, {\n  error: MethodNotFoundError\n});\nrpcErrorsMap.set(ERR_RPC_INVALID_PARAMS, {\n  error: InvalidParamsError\n});\nrpcErrorsMap.set(ERR_RPC_INTERNAL_ERROR, {\n  error: InternalError\n});\nrpcErrorsMap.set(ERR_RPC_INVALID_INPUT, {\n  error: InvalidInputError\n});\nrpcErrorsMap.set(ERR_RPC_UNSUPPORTED_METHOD, {\n  error: MethodNotSupported\n});\nrpcErrorsMap.set(ERR_RPC_UNAVAILABLE_RESOURCE, {\n  error: ResourceUnavailableError\n});\nrpcErrorsMap.set(ERR_RPC_TRANSACTION_REJECTED, {\n  error: TransactionRejectedError\n});\nrpcErrorsMap.set(ERR_RPC_MISSING_RESOURCE, {\n  error: ResourcesNotFoundError\n});\nrpcErrorsMap.set(ERR_RPC_NOT_SUPPORTED, {\n  error: VersionNotSupportedError\n});\nrpcErrorsMap.set(ERR_RPC_LIMIT_EXCEEDED, {\n  error: LimitExceededError\n});","map":{"version":3,"mappings":"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","names":["BaseWeb3Error","ERR_RPC_INTERNAL_ERROR","ERR_RPC_INVALID_INPUT","ERR_RPC_INVALID_JSON","ERR_RPC_INVALID_METHOD","ERR_RPC_INVALID_PARAMS","ERR_RPC_INVALID_REQUEST","ERR_RPC_LIMIT_EXCEEDED","ERR_RPC_MISSING_RESOURCE","ERR_RPC_NOT_SUPPORTED","ERR_RPC_TRANSACTION_REJECTED","ERR_RPC_UNAVAILABLE_RESOURCE","ERR_RPC_UNSUPPORTED_METHOD","RpcErrorMessages","genericRpcErrorMessageTemplate","RpcError","constructor","rpcError","message","replace","error","code","toString","id","jsonrpc","jsonRpcError","toJSON","jsonRpc","EIP1193ProviderRpcError","data","statusCodeRange","Object","keys","find","statusCode","parseInt","split","ParseError","InvalidRequestError","MethodNotFoundError","InvalidParamsError","InternalError","InvalidInputError","MethodNotSupported","ResourceUnavailableError","ResourcesNotFoundError","VersionNotSupportedError","TransactionRejectedError","LimitExceededError","rpcErrorsMap","Map","set"],"sources":["C:\\Users\\rockr\\Desktop\\NFT-MARKETPLACE\\node_modules\\web3-errors\\src\\errors\\rpc_errors.ts"],"sourcesContent":["/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n/* eslint-disable max-classes-per-file */\n\nimport { JsonRpcResponseWithError, JsonRpcId, JsonRpcError } from 'web3-types';\nimport { BaseWeb3Error } from '../web3_error_base.js';\nimport {\n\tERR_RPC_INTERNAL_ERROR,\n\tERR_RPC_INVALID_INPUT,\n\tERR_RPC_INVALID_JSON,\n\tERR_RPC_INVALID_METHOD,\n\tERR_RPC_INVALID_PARAMS,\n\tERR_RPC_INVALID_REQUEST,\n\tERR_RPC_LIMIT_EXCEEDED,\n\tERR_RPC_MISSING_RESOURCE,\n\tERR_RPC_NOT_SUPPORTED,\n\tERR_RPC_TRANSACTION_REJECTED,\n\tERR_RPC_UNAVAILABLE_RESOURCE,\n\tERR_RPC_UNSUPPORTED_METHOD,\n} from '../error_codes.js';\nimport { RpcErrorMessages, genericRpcErrorMessageTemplate } from './rpc_error_messages.js';\n\nexport class RpcError extends BaseWeb3Error {\n\tpublic code: number;\n\tpublic id: JsonRpcId;\n\tpublic jsonrpc: string;\n\tpublic jsonRpcError: JsonRpcError;\n\tpublic constructor(rpcError: JsonRpcResponseWithError, message?: string) {\n\t\tsuper(\n\t\t\tmessage ??\n\t\t\t\tgenericRpcErrorMessageTemplate.replace('*code*', rpcError.error.code.toString()),\n\t\t);\n\t\tthis.code = rpcError.error.code;\n\t\tthis.id = rpcError.id;\n\t\tthis.jsonrpc = rpcError.jsonrpc;\n\t\tthis.jsonRpcError = rpcError.error;\n\t}\n\n\tpublic toJSON() {\n\t\treturn { ...super.toJSON(), error: this.jsonRpcError, id: this.id, jsonRpc: this.jsonrpc };\n\t}\n}\n\nexport class EIP1193ProviderRpcError extends BaseWeb3Error {\n\tpublic code: number;\n\tpublic data?: unknown;\n\n\tpublic constructor(code: number, data?: unknown) {\n\t\tif (!code) {\n\t\t\t// this case should ideally not happen\n\t\t\tsuper();\n\t\t} else if (RpcErrorMessages[code]?.message) {\n\t\t\tsuper(RpcErrorMessages[code].message);\n\t\t} else {\n\t\t\t// Retrieve the status code object for the given code from the table, by searching through the appropriate range\n\t\t\tconst statusCodeRange = Object.keys(RpcErrorMessages).find(\n\t\t\t\tstatusCode =>\n\t\t\t\t\ttypeof statusCode === 'string' &&\n\t\t\t\t\tcode >= parseInt(statusCode.split('-')[0], 10) &&\n\t\t\t\t\tcode <= parseInt(statusCode.split('-')[1], 10),\n\t\t\t);\n\t\t\tsuper(\n\t\t\t\tRpcErrorMessages[statusCodeRange ?? '']?.message ??\n\t\t\t\t\tgenericRpcErrorMessageTemplate.replace('*code*', code?.toString() ?? '\"\"'),\n\t\t\t);\n\t\t}\n\t\tthis.code = code;\n\t\tthis.data = data;\n\t}\n}\n\nexport class ParseError extends RpcError {\n\tpublic code = ERR_RPC_INVALID_JSON;\n\tpublic constructor(rpcError: JsonRpcResponseWithError) {\n\t\tsuper(rpcError, RpcErrorMessages[ERR_RPC_INVALID_JSON].message);\n\t}\n}\n\nexport class InvalidRequestError extends RpcError {\n\tpublic code = ERR_RPC_INVALID_REQUEST;\n\tpublic constructor(rpcError: JsonRpcResponseWithError) {\n\t\tsuper(rpcError, RpcErrorMessages[ERR_RPC_INVALID_REQUEST].message);\n\t}\n}\n\nexport class MethodNotFoundError extends RpcError {\n\tpublic code = ERR_RPC_INVALID_METHOD;\n\tpublic constructor(rpcError: JsonRpcResponseWithError) {\n\t\tsuper(rpcError, RpcErrorMessages[ERR_RPC_INVALID_METHOD].message);\n\t}\n}\n\nexport class InvalidParamsError extends RpcError {\n\tpublic code = ERR_RPC_INVALID_PARAMS;\n\tpublic constructor(rpcError: JsonRpcResponseWithError) {\n\t\tsuper(rpcError, RpcErrorMessages[ERR_RPC_INVALID_PARAMS].message);\n\t}\n}\n\nexport class InternalError extends RpcError {\n\tpublic code = ERR_RPC_INTERNAL_ERROR;\n\tpublic constructor(rpcError: JsonRpcResponseWithError) {\n\t\tsuper(rpcError, RpcErrorMessages[ERR_RPC_INTERNAL_ERROR].message);\n\t}\n}\n\nexport class InvalidInputError extends RpcError {\n\tpublic code = ERR_RPC_INVALID_INPUT;\n\tpublic constructor(rpcError: JsonRpcResponseWithError) {\n\t\tsuper(rpcError, RpcErrorMessages[ERR_RPC_INVALID_INPUT].message);\n\t}\n}\n\nexport class MethodNotSupported extends RpcError {\n\tpublic code = ERR_RPC_UNSUPPORTED_METHOD;\n\tpublic constructor(rpcError: JsonRpcResponseWithError) {\n\t\tsuper(rpcError, RpcErrorMessages[ERR_RPC_UNSUPPORTED_METHOD].message);\n\t}\n}\n\nexport class ResourceUnavailableError extends RpcError {\n\tpublic code = ERR_RPC_UNAVAILABLE_RESOURCE;\n\tpublic constructor(rpcError: JsonRpcResponseWithError) {\n\t\tsuper(rpcError, RpcErrorMessages[ERR_RPC_UNAVAILABLE_RESOURCE].message);\n\t}\n}\n\nexport class ResourcesNotFoundError extends RpcError {\n\tpublic code = ERR_RPC_MISSING_RESOURCE;\n\tpublic constructor(rpcError: JsonRpcResponseWithError) {\n\t\tsuper(rpcError, RpcErrorMessages[ERR_RPC_MISSING_RESOURCE].message);\n\t}\n}\n\nexport class VersionNotSupportedError extends RpcError {\n\tpublic code = ERR_RPC_NOT_SUPPORTED;\n\tpublic constructor(rpcError: JsonRpcResponseWithError) {\n\t\tsuper(rpcError, RpcErrorMessages[ERR_RPC_NOT_SUPPORTED].message);\n\t}\n}\n\nexport class TransactionRejectedError extends RpcError {\n\tpublic code = ERR_RPC_TRANSACTION_REJECTED;\n\tpublic constructor(rpcError: JsonRpcResponseWithError) {\n\t\tsuper(rpcError, RpcErrorMessages[ERR_RPC_TRANSACTION_REJECTED].message);\n\t}\n}\n\nexport class LimitExceededError extends RpcError {\n\tpublic code = ERR_RPC_LIMIT_EXCEEDED;\n\tpublic constructor(rpcError: JsonRpcResponseWithError) {\n\t\tsuper(rpcError, RpcErrorMessages[ERR_RPC_LIMIT_EXCEEDED].message);\n\t}\n}\n\nexport const rpcErrorsMap = new Map<number, { error: typeof RpcError }>();\nrpcErrorsMap.set(ERR_RPC_INVALID_JSON, { error: ParseError });\nrpcErrorsMap.set(ERR_RPC_INVALID_REQUEST, {\n\terror: InvalidRequestError,\n});\nrpcErrorsMap.set(ERR_RPC_INVALID_METHOD, {\n\terror: MethodNotFoundError,\n});\nrpcErrorsMap.set(ERR_RPC_INVALID_PARAMS, { error: InvalidParamsError });\nrpcErrorsMap.set(ERR_RPC_INTERNAL_ERROR, { error: InternalError });\nrpcErrorsMap.set(ERR_RPC_INVALID_INPUT, { error: InvalidInputError });\nrpcErrorsMap.set(ERR_RPC_UNSUPPORTED_METHOD, {\n\terror: MethodNotSupported,\n});\nrpcErrorsMap.set(ERR_RPC_UNAVAILABLE_RESOURCE, {\n\terror: ResourceUnavailableError,\n});\nrpcErrorsMap.set(ERR_RPC_TRANSACTION_REJECTED, {\n\terror: TransactionRejectedError,\n});\nrpcErrorsMap.set(ERR_RPC_MISSING_RESOURCE, {\n\terror: ResourcesNotFoundError,\n});\nrpcErrorsMap.set(ERR_RPC_NOT_SUPPORTED, {\n\terror: VersionNotSupportedError,\n});\nrpcErrorsMap.set(ERR_RPC_LIMIT_EXCEEDED, { error: LimitExceededError });\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}