{"ast":null,"code":"export function number(n) {\n  if (!Number.isSafeInteger(n) || n < 0) throw new Error(`Wrong positive integer: ${n}`);\n}\nexport function bool(b) {\n  if (typeof b !== 'boolean') throw new Error(`Expected boolean, not ${b}`);\n}\nexport function bytes(b) {\n  if (!(b instanceof Uint8Array)) throw new Error('Expected Uint8Array');\n  for (var _len = arguments.length, lengths = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    lengths[_key - 1] = arguments[_key];\n  }\n  if (lengths.length > 0 && !lengths.includes(b.length)) throw new Error(`Expected Uint8Array of length ${lengths}, not of length=${b.length}`);\n}\nexport function hash(hash) {\n  if (typeof hash !== 'function' || typeof hash.create !== 'function') throw new Error('Hash should be wrapped by utils.wrapConstructor');\n  number(hash.outputLen);\n  number(hash.blockLen);\n}\nexport function exists(instance) {\n  let checkFinished = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  if (instance.destroyed) throw new Error('Hash instance has been destroyed');\n  if (checkFinished && instance.finished) throw new Error('Hash#digest() has already been called');\n}\nexport function output(out, instance) {\n  bytes(out);\n  const min = instance.outputLen;\n  if (out.length < min) {\n    throw new Error(`digestInto() expects output buffer of length at least ${min}`);\n  }\n}\nconst assert = {\n  number,\n  bool,\n  bytes,\n  hash,\n  exists,\n  output\n};\nexport default assert;","map":{"version":3,"mappings":"AAAA,OAAM,SAAUA,MAAM,CAACC,CAAS;EAC9B,IAAI,CAACC,MAAM,CAACC,aAAa,CAACF,CAAC,CAAC,IAAIA,CAAC,GAAG,CAAC,EAAE,MAAM,IAAIG,KAAK,CAAC,2BAA2BH,CAAC,EAAE,CAAC;AACxF;AAEA,OAAM,SAAUI,IAAI,CAACC,CAAU;EAC7B,IAAI,OAAOA,CAAC,KAAK,SAAS,EAAE,MAAM,IAAIF,KAAK,CAAC,yBAAyBE,CAAC,EAAE,CAAC;AAC3E;AAEA,OAAM,SAAUC,KAAK,CAACD,CAAyB,EAAsB;EACnE,IAAI,EAAEA,CAAC,YAAYE,UAAU,CAAC,EAAE,MAAM,IAAIJ,KAAK,CAAC,qBAAqB,CAAC;EAAC,kCADrBK,OAAiB;IAAjBA,OAAiB;EAAA;EAEnE,IAAIA,OAAO,CAACC,MAAM,GAAG,CAAC,IAAI,CAACD,OAAO,CAACE,QAAQ,CAACL,CAAC,CAACI,MAAM,CAAC,EACnD,MAAM,IAAIN,KAAK,CAAC,iCAAiCK,OAAO,mBAAmBH,CAAC,CAACI,MAAM,EAAE,CAAC;AAC1F;AAQA,OAAM,SAAUE,IAAI,CAACA,IAAU;EAC7B,IAAI,OAAOA,IAAI,KAAK,UAAU,IAAI,OAAOA,IAAI,CAACC,MAAM,KAAK,UAAU,EACjE,MAAM,IAAIT,KAAK,CAAC,iDAAiD,CAAC;EACpEJ,MAAM,CAACY,IAAI,CAACE,SAAS,CAAC;EACtBd,MAAM,CAACY,IAAI,CAACG,QAAQ,CAAC;AACvB;AAEA,OAAM,SAAUC,MAAM,CAACC,QAAa,EAAsB;EAAA,IAApBC,aAAa,uEAAG,IAAI;EACxD,IAAID,QAAQ,CAACE,SAAS,EAAE,MAAM,IAAIf,KAAK,CAAC,kCAAkC,CAAC;EAC3E,IAAIc,aAAa,IAAID,QAAQ,CAACG,QAAQ,EAAE,MAAM,IAAIhB,KAAK,CAAC,uCAAuC,CAAC;AAClG;AACA,OAAM,SAAUiB,MAAM,CAACC,GAAQ,EAAEL,QAAa;EAC5CV,KAAK,CAACe,GAAG,CAAC;EACV,MAAMC,GAAG,GAAGN,QAAQ,CAACH,SAAS;EAC9B,IAAIQ,GAAG,CAACZ,MAAM,GAAGa,GAAG,EAAE;IACpB,MAAM,IAAInB,KAAK,CAAC,yDAAyDmB,GAAG,EAAE,CAAC;;AAEnF;AAEA,MAAMC,MAAM,GAAG;EACbxB,MAAM;EACNK,IAAI;EACJE,KAAK;EACLK,IAAI;EACJI,MAAM;EACNK;CACD;AAED,eAAeG,MAAM","names":["number","n","Number","isSafeInteger","Error","bool","b","bytes","Uint8Array","lengths","length","includes","hash","create","outputLen","blockLen","exists","instance","checkFinished","destroyed","finished","output","out","min","assert"],"sources":["C:\\Users\\rockr\\Desktop\\NFT-MARKETPLACE\\node_modules\\web3-providers-ws\\node_modules\\@noble\\hashes\\src\\_assert.ts"],"sourcesContent":["export function number(n: number) {\n  if (!Number.isSafeInteger(n) || n < 0) throw new Error(`Wrong positive integer: ${n}`);\n}\n\nexport function bool(b: boolean) {\n  if (typeof b !== 'boolean') throw new Error(`Expected boolean, not ${b}`);\n}\n\nexport function bytes(b: Uint8Array | undefined, ...lengths: number[]) {\n  if (!(b instanceof Uint8Array)) throw new Error('Expected Uint8Array');\n  if (lengths.length > 0 && !lengths.includes(b.length))\n    throw new Error(`Expected Uint8Array of length ${lengths}, not of length=${b.length}`);\n}\n\ntype Hash = {\n  (data: Uint8Array): Uint8Array;\n  blockLen: number;\n  outputLen: number;\n  create: any;\n};\nexport function hash(hash: Hash) {\n  if (typeof hash !== 'function' || typeof hash.create !== 'function')\n    throw new Error('Hash should be wrapped by utils.wrapConstructor');\n  number(hash.outputLen);\n  number(hash.blockLen);\n}\n\nexport function exists(instance: any, checkFinished = true) {\n  if (instance.destroyed) throw new Error('Hash instance has been destroyed');\n  if (checkFinished && instance.finished) throw new Error('Hash#digest() has already been called');\n}\nexport function output(out: any, instance: any) {\n  bytes(out);\n  const min = instance.outputLen;\n  if (out.length < min) {\n    throw new Error(`digestInto() expects output buffer of length at least ${min}`);\n  }\n}\n\nconst assert = {\n  number,\n  bool,\n  bytes,\n  hash,\n  exists,\n  output,\n};\n\nexport default assert;\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}