{"ast":null,"code":"import { z, ZodIssueCode } from 'zod';\nimport { Web3ValidatorError } from './errors.js';\nimport formats from './formats.js';\nconst convertToZod = schema => {\n  if ((!(schema === null || schema === void 0 ? void 0 : schema.type) || (schema === null || schema === void 0 ? void 0 : schema.type) === 'object') && (schema === null || schema === void 0 ? void 0 : schema.properties)) {\n    const obj = {};\n    for (const name of Object.keys(schema.properties)) {\n      const zItem = convertToZod(schema.properties[name]);\n      if (zItem) {\n        obj[name] = zItem;\n      }\n    }\n    if (Array.isArray(schema.required)) {\n      return z.object(obj).partial().required(schema.required.reduce((acc, v) => Object.assign(Object.assign({}, acc), {\n        [v]: true\n      }), {}));\n    }\n    return z.object(obj).partial();\n  }\n  if ((schema === null || schema === void 0 ? void 0 : schema.type) === 'array' && (schema === null || schema === void 0 ? void 0 : schema.items)) {\n    if (Array.isArray(schema.items) && schema.items.length > 0) {\n      const arr = [];\n      for (const item of schema.items) {\n        const zItem = convertToZod(item);\n        if (zItem) {\n          arr.push(zItem);\n        }\n      }\n      return z.tuple(arr);\n    }\n    return z.array(convertToZod(schema.items));\n  }\n  if (schema.oneOf && Array.isArray(schema.oneOf)) {\n    return z.union(schema.oneOf.map(oneOfSchema => convertToZod(oneOfSchema)));\n  }\n  if (schema === null || schema === void 0 ? void 0 : schema.format) {\n    return z.any().refine(formats[schema.format], value => ({\n      params: {\n        value,\n        format: schema.format\n      }\n    }));\n  }\n  if ((schema === null || schema === void 0 ? void 0 : schema.type) && (schema === null || schema === void 0 ? void 0 : schema.type) !== 'object' && typeof z[String(schema.type)] === 'function') {\n    return z[String(schema.type)]();\n  }\n  return z.object({\n    data: z.any()\n  }).partial();\n};\nexport class Validator {\n  // eslint-disable-next-line no-useless-constructor, @typescript-eslint/no-empty-function\n  static factory() {\n    if (!Validator.validatorInstance) {\n      Validator.validatorInstance = new Validator();\n    }\n    return Validator.validatorInstance;\n  }\n  validate(schema, data, options) {\n    var _a, _b;\n    const zod = convertToZod(schema);\n    const result = zod.safeParse(data);\n    if (!result.success) {\n      const errors = this.convertErrors((_b = (_a = result.error) === null || _a === void 0 ? void 0 : _a.issues) !== null && _b !== void 0 ? _b : []);\n      if (errors) {\n        if (options === null || options === void 0 ? void 0 : options.silent) {\n          return errors;\n        }\n        throw new Web3ValidatorError(errors);\n      }\n    }\n    return undefined;\n  }\n  // eslint-disable-next-line class-methods-use-this\n  convertErrors(errors) {\n    if (errors && Array.isArray(errors) && errors.length > 0) {\n      return errors.map(error => {\n        var _a;\n        let message;\n        let keyword;\n        let params;\n        let schemaPath;\n        schemaPath = error.path.join('/');\n        const field = String(error.path[error.path.length - 1]);\n        const instancePath = error.path.join('/');\n        if (error.code === ZodIssueCode.too_big) {\n          keyword = 'maxItems';\n          schemaPath = `${instancePath}/maxItems`;\n          params = {\n            limit: error.maximum\n          };\n          message = `must NOT have more than ${error.maximum} items`;\n        } else if (error.code === ZodIssueCode.too_small) {\n          keyword = 'minItems';\n          schemaPath = `${instancePath}/minItems`;\n          params = {\n            limit: error.minimum\n          };\n          message = `must NOT have fewer than ${error.minimum} items`;\n        } else if (error.code === ZodIssueCode.custom) {\n          const {\n            value,\n            format\n          } = (_a = error.params) !== null && _a !== void 0 ? _a : {};\n          if (typeof value === 'undefined') {\n            message = `value at \"/${schemaPath}\" is required`;\n          } else {\n            message = `value \"${\n            // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n            typeof value === 'object' ? JSON.stringify(value) : value}\" at \"/${schemaPath}\" must pass \"${format}\" validation`;\n          }\n          params = {\n            value\n          };\n        }\n        return {\n          keyword: keyword !== null && keyword !== void 0 ? keyword : field,\n          instancePath: instancePath ? `/${instancePath}` : '',\n          schemaPath: schemaPath ? `#${schemaPath}` : '#',\n          // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n          params: params !== null && params !== void 0 ? params : {\n            value: error.message\n          },\n          message: message !== null && message !== void 0 ? message : error.message\n        };\n      });\n    }\n    return undefined;\n  }\n}","map":{"version":3,"mappings":"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","names":["z","ZodIssueCode","Web3ValidatorError","formats","convertToZod","schema","type","properties","obj","name","Object","keys","zItem","Array","isArray","required","object","partial","reduce","acc","v","items","length","arr","item","push","tuple","array","oneOf","union","map","oneOfSchema","format","any","refine","value","params","String","data","Validator","factory","validatorInstance","validate","options","zod","result","safeParse","success","errors","convertErrors","error","issues","silent","undefined","message","keyword","schemaPath","path","join","field","instancePath","code","too_big","limit","maximum","too_small","minimum","custom","JSON","stringify"],"sources":["C:\\Users\\rockr\\Desktop\\NFT-MARKETPLACE\\node_modules\\web3-validator\\src\\validator.ts"],"sourcesContent":["/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport { Web3ValidationErrorObject } from 'web3-types';\n\nimport { z, ZodType, ZodIssue, ZodIssueCode, ZodTypeAny } from 'zod';\n\nimport { RawCreateParams } from 'zod/lib/types';\nimport { Web3ValidatorError } from './errors.js';\nimport { Json, JsonSchema } from './types.js';\nimport formats from './formats.js';\n\nconst convertToZod = (schema: JsonSchema): ZodType => {\n\tif ((!schema?.type || schema?.type === 'object') && schema?.properties) {\n\t\tconst obj: { [key: string]: ZodType } = {};\n\t\tfor (const name of Object.keys(schema.properties)) {\n\t\t\tconst zItem = convertToZod(schema.properties[name]);\n\t\t\tif (zItem) {\n\t\t\t\tobj[name] = zItem;\n\t\t\t}\n\t\t}\n\n\t\tif (Array.isArray(schema.required)) {\n\t\t\treturn z\n\t\t\t\t.object(obj)\n\t\t\t\t.partial()\n\t\t\t\t.required(schema.required.reduce((acc, v: string) => ({ ...acc, [v]: true }), {}));\n\t\t}\n\t\treturn z.object(obj).partial();\n\t}\n\n\tif (schema?.type === 'array' && schema?.items) {\n\t\tif (Array.isArray(schema.items) && schema.items.length > 0) {\n\t\t\tconst arr: Partial<[ZodTypeAny, ...ZodTypeAny[]]> = [];\n\t\t\tfor (const item of schema.items) {\n\t\t\t\tconst zItem = convertToZod(item);\n\t\t\t\tif (zItem) {\n\t\t\t\t\tarr.push(zItem);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn z.tuple(arr as [ZodTypeAny, ...ZodTypeAny[]]);\n\t\t}\n\t\treturn z.array(convertToZod(schema.items as JsonSchema));\n\t}\n\n\tif (schema.oneOf && Array.isArray(schema.oneOf)) {\n\t\treturn z.union(\n\t\t\tschema.oneOf.map(oneOfSchema => convertToZod(oneOfSchema)) as [\n\t\t\t\tZodTypeAny,\n\t\t\t\tZodTypeAny,\n\t\t\t\t...ZodTypeAny[],\n\t\t\t],\n\t\t);\n\t}\n\n\tif (schema?.format) {\n\t\treturn z.any().refine(formats[schema.format], (value: unknown) => ({\n\t\t\tparams: { value, format: schema.format },\n\t\t}));\n\t}\n\n\tif (\n\t\tschema?.type &&\n\t\tschema?.type !== 'object' &&\n\t\ttypeof (z as unknown as { [key: string]: (params?: RawCreateParams) => ZodType })[\n\t\t\tString(schema.type)\n\t\t] === 'function'\n\t) {\n\t\treturn (z as unknown as { [key: string]: (params?: RawCreateParams) => ZodType })[\n\t\t\tString(schema.type)\n\t\t]();\n\t}\n\treturn z.object({ data: z.any() }).partial();\n};\n\nexport class Validator {\n\t// eslint-disable-next-line no-use-before-define\n\tprivate static validatorInstance?: Validator;\n\n\t// eslint-disable-next-line no-useless-constructor, @typescript-eslint/no-empty-function\n\tpublic static factory(): Validator {\n\t\tif (!Validator.validatorInstance) {\n\t\t\tValidator.validatorInstance = new Validator();\n\t\t}\n\t\treturn Validator.validatorInstance;\n\t}\n\n\tpublic validate(schema: JsonSchema, data: Json, options?: { silent?: boolean }) {\n\t\tconst zod = convertToZod(schema);\n\t\tconst result = zod.safeParse(data);\n\t\tif (!result.success) {\n\t\t\tconst errors = this.convertErrors(result.error?.issues ?? []);\n\t\t\tif (errors) {\n\t\t\t\tif (options?.silent) {\n\t\t\t\t\treturn errors;\n\t\t\t\t}\n\t\t\t\tthrow new Web3ValidatorError(errors);\n\t\t\t}\n\t\t}\n\t\treturn undefined;\n\t}\n\t// eslint-disable-next-line class-methods-use-this\n\tprivate convertErrors(errors: ZodIssue[] | undefined): Web3ValidationErrorObject[] | undefined {\n\t\tif (errors && Array.isArray(errors) && errors.length > 0) {\n\t\t\treturn errors.map((error: ZodIssue) => {\n\t\t\t\tlet message;\n\t\t\t\tlet keyword;\n\t\t\t\tlet params;\n\t\t\t\tlet schemaPath;\n\n\t\t\t\tschemaPath = error.path.join('/');\n\n\t\t\t\tconst field = String(error.path[error.path.length - 1]);\n\t\t\t\tconst instancePath = error.path.join('/');\n\t\t\t\tif (error.code === ZodIssueCode.too_big) {\n\t\t\t\t\tkeyword = 'maxItems';\n\t\t\t\t\tschemaPath = `${instancePath}/maxItems`;\n\t\t\t\t\tparams = { limit: error.maximum };\n\t\t\t\t\tmessage = `must NOT have more than ${error.maximum} items`;\n\t\t\t\t} else if (error.code === ZodIssueCode.too_small) {\n\t\t\t\t\tkeyword = 'minItems';\n\t\t\t\t\tschemaPath = `${instancePath}/minItems`;\n\t\t\t\t\tparams = { limit: error.minimum };\n\t\t\t\t\tmessage = `must NOT have fewer than ${error.minimum} items`;\n\t\t\t\t} else if (error.code === ZodIssueCode.custom) {\n\t\t\t\t\tconst { value, format } = (error.params ?? {}) as {\n\t\t\t\t\t\tvalue: unknown;\n\t\t\t\t\t\tformat: string;\n\t\t\t\t\t};\n\n\t\t\t\t\tif (typeof value === 'undefined') {\n\t\t\t\t\t\tmessage = `value at \"/${schemaPath}\" is required`;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tmessage = `value \"${\n\t\t\t\t\t\t\t// eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n\t\t\t\t\t\t\ttypeof value === 'object' ? JSON.stringify(value) : value\n\t\t\t\t\t\t}\" at \"/${schemaPath}\" must pass \"${format}\" validation`;\n\t\t\t\t\t}\n\n\t\t\t\t\tparams = { value };\n\t\t\t\t}\n\n\t\t\t\treturn {\n\t\t\t\t\tkeyword: keyword ?? field,\n\t\t\t\t\tinstancePath: instancePath ? `/${instancePath}` : '',\n\t\t\t\t\tschemaPath: schemaPath ? `#${schemaPath}` : '#',\n\t\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n\t\t\t\t\tparams: params ?? { value: error.message },\n\t\t\t\t\tmessage: message ?? error.message,\n\t\t\t\t} as Web3ValidationErrorObject;\n\t\t\t});\n\t\t}\n\t\treturn undefined;\n\t}\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}