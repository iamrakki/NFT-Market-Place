{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rockr\\\\NFT-MARKETPLACE\\\\src\\\\components\\\\Marketplace.js\",\n  _s = $RefreshSig$();\nimport NFTTile from \"./NFTTile\";\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Marketplace(props) {\n  _s();\n  const [data, updateData] = useState([]);\n  const [dataFetched, updateFetched] = useState(false);\n  async function getAllNFTs() {\n    const ethers = require(\"ethers\");\n    let contract = props.contract;\n    let transaction = await contract.getAllNFTs();\n    const items = await Promise.all(transaction.map(async i => {\n      const tokenURI = await contract.tokenURI(i.tokenId);\n\n      // let meta = await axios.get(tokenURI);\n      console.log(\"tokenURI\", tokenURI);\n      let meta = await axios(tokenURI, {\n        method: 'GET',\n        mode: 'cors'\n      });\n      meta = meta.data;\n      let image = getIPFSGatewayURL(meta.image);\n      console.log(\"image url: \" + image);\n      let price = ethers.utils.formatUnits(i.price.toString(), 'ether');\n      let item = {\n        price,\n        tokenId: i.tokenId.toNumber(),\n        seller: i.seller,\n        owner: i.owner,\n        image: image,\n        name: meta.name,\n        description: meta.description\n      };\n      return item;\n    }));\n    updateFetched(true);\n    updateData(items);\n  }\n  if (!dataFetched) {\n    getAllNFTs();\n  }\n  const getIPFSGatewayURL = ipfsURL => {\n    let urlArray = ipfsURL.split(\"/\");\n    let ipfsGateWayURL = `https://${urlArray[2]}.ipfs.dweb.link/${urlArray[3]}`;\n    return ipfsGateWayURL;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-white text-center  mb-5 fw-bold fs-3\",\n        children: \"Top NFTs\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"row row-cols-1 row-cols-md-4 g-4 mx-5 text-center\",\n        children: data.map((value, index) => {\n          return /*#__PURE__*/_jsxDEV(NFTTile, {\n            data: value\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 32\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 23\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 9\n  }, this);\n}\n_s(Marketplace, \"92MjryZZths+GNFMROviKna/WfA=\");\n_c = Marketplace;\nvar _c;\n$RefreshReg$(_c, \"Marketplace\");","map":{"version":3,"names":["NFTTile","axios","useState","Marketplace","props","data","updateData","dataFetched","updateFetched","getAllNFTs","ethers","require","contract","transaction","items","Promise","all","map","i","tokenURI","tokenId","console","log","meta","method","mode","image","getIPFSGatewayURL","price","utils","formatUnits","toString","item","toNumber","seller","owner","name","description","ipfsURL","urlArray","split","ipfsGateWayURL","value","index"],"sources":["C:/Users/rockr/NFT-MARKETPLACE/src/components/Marketplace.js"],"sourcesContent":["import NFTTile from \"./NFTTile\";\r\nimport axios from \"axios\";\r\nimport { useState } from \"react\";\r\n\r\nexport default function Marketplace(props) {\r\n\r\n    const [data, updateData] = useState([]);\r\n    const [dataFetched, updateFetched] = useState(false);\r\n\r\n    async function getAllNFTs() {\r\n        const ethers = require(\"ethers\");\r\n        let contract = props.contract;\r\n        let transaction = await contract.getAllNFTs()\r\n        const items = await Promise.all(transaction.map(async i => {\r\n            const tokenURI = await contract.tokenURI(i.tokenId);\r\n\r\n            // let meta = await axios.get(tokenURI);\r\n            console.log(\"tokenURI\", tokenURI)\r\n\r\n            let meta = await axios(tokenURI, {\r\n                method: 'GET',\r\n                mode: 'cors'\r\n            });\r\n            meta = meta.data;\r\n            let image = getIPFSGatewayURL(meta.image);\r\n            console.log(\"image url: \" + image);\r\n            let price = ethers.utils.formatUnits(i.price.toString(), 'ether');\r\n            let item = {\r\n                price,\r\n                tokenId: i.tokenId.toNumber(),\r\n                seller: i.seller,\r\n                owner: i.owner,\r\n                image: image,\r\n                name: meta.name,\r\n                description: meta.description,\r\n            }\r\n            return item;\r\n        }))\r\n\r\n        updateFetched(true);\r\n        updateData(items);\r\n    }\r\n    if (!dataFetched) {\r\n        getAllNFTs();\r\n    }\r\n\r\n    const getIPFSGatewayURL = (ipfsURL) => {\r\n        let urlArray = ipfsURL.split(\"/\");\r\n        let ipfsGateWayURL = `https://${urlArray[2]}.ipfs.dweb.link/${urlArray[3]}`;\r\n        return ipfsGateWayURL;\r\n    }\r\n    return (\r\n        <div>\r\n            <div>\r\n                <div className=\"text-white text-center  mb-5 fw-bold fs-3\">\r\n                    Top NFTs\r\n                </div>\r\n\r\n                <div class=\"row row-cols-1 row-cols-md-4 g-4 mx-5 text-center\">\r\n                    {data.map((value, index) => {\r\n                        return <NFTTile data={value} key={index}></NFTTile>;\r\n                    })}\r\n                </div>\r\n                <br /><br />\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}