{"ast":null,"code":"/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { ResolverMethodMissingError } from 'web3-errors';\nimport { isNullish, sha3 } from 'web3-utils';\nimport { isHexStrict } from 'web3-validator';\nimport { interfaceIds, methodsInInterface } from './config.js';\nimport { namehash } from './utils.js';\n//  Default public resolver\n//  https://github.com/ensdomains/resolvers/blob/master/contracts/PublicResolver.sol\nexport class Resolver {\n  constructor(registry) {\n    this.registry = registry;\n  }\n  getResolverContractAdapter(ENSName) {\n    return __awaiter(this, void 0, void 0, function* () {\n      //  TODO : (Future 4.1.0 TDB) cache resolver contract if frequently queried same ENS name, refresh cache based on TTL and usage, also limit cache size, optional cache with a flag\n      return this.registry.getResolver(ENSName);\n    });\n  }\n  //  https://eips.ethereum.org/EIPS/eip-165\n  // eslint-disable-next-line class-methods-use-this\n  checkInterfaceSupport(resolverContract, methodName) {\n    var _a, _b;\n    return __awaiter(this, void 0, void 0, function* () {\n      if (isNullish(interfaceIds[methodName])) throw new ResolverMethodMissingError((_a = resolverContract.options.address) !== null && _a !== void 0 ? _a : '', methodName);\n      const supported = yield resolverContract.methods.supportsInterface(interfaceIds[methodName]).call();\n      if (!supported) throw new ResolverMethodMissingError((_b = resolverContract.options.address) !== null && _b !== void 0 ? _b : '', methodName);\n    });\n  }\n  supportsInterface(ENSName, interfaceId) {\n    var _a;\n    return __awaiter(this, void 0, void 0, function* () {\n      const resolverContract = yield this.getResolverContractAdapter(ENSName);\n      let interfaceIdParam = interfaceId;\n      if (!isHexStrict(interfaceIdParam)) {\n        interfaceIdParam = (_a = sha3(interfaceId)) !== null && _a !== void 0 ? _a : '';\n        if (interfaceId === '') throw new Error('Invalid interface Id');\n        interfaceIdParam = interfaceIdParam.slice(0, 10);\n      }\n      return resolverContract.methods.supportsInterface(interfaceIdParam).call();\n    });\n  }\n  // eslint-disable-next-line @typescript-eslint/no-inferrable-types\n  getAddress(ENSName) {\n    let coinType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 60;\n    return __awaiter(this, void 0, void 0, function* () {\n      const resolverContract = yield this.getResolverContractAdapter(ENSName);\n      yield this.checkInterfaceSupport(resolverContract, methodsInInterface.addr);\n      return resolverContract.methods.addr(namehash(ENSName), coinType).call();\n    });\n  }\n  getPubkey(ENSName) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const resolverContract = yield this.getResolverContractAdapter(ENSName);\n      yield this.checkInterfaceSupport(resolverContract, methodsInInterface.pubkey);\n      return resolverContract.methods.pubkey(namehash(ENSName)).call();\n    });\n  }\n  getContenthash(ENSName) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const resolverContract = yield this.getResolverContractAdapter(ENSName);\n      yield this.checkInterfaceSupport(resolverContract, methodsInInterface.contenthash);\n      return resolverContract.methods.contenthash(namehash(ENSName)).call();\n    });\n  }\n}","map":{"version":3,"mappings":"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","names":["ResolverMethodMissingError","isNullish","sha3","isHexStrict","interfaceIds","methodsInInterface","namehash","Resolver","constructor","registry","getResolverContractAdapter","ENSName","getResolver","checkInterfaceSupport","resolverContract","methodName","options","address","supported","methods","supportsInterface","call","interfaceId","interfaceIdParam","Error","slice","getAddress","coinType","addr","getPubkey","pubkey","getContenthash","contenthash"],"sources":["C:\\Users\\rockr\\Desktop\\NFT-MARKETPLACE\\node_modules\\web3-eth-ens\\src\\resolver.ts"],"sourcesContent":["ï»¿/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport { ResolverMethodMissingError } from 'web3-errors';\nimport { Contract } from 'web3-eth-contract';\nimport { isNullish, sha3 } from 'web3-utils';\nimport { isHexStrict } from 'web3-validator';\nimport { PublicResolverAbi } from './abi/ens/PublicResolver.js';\nimport { interfaceIds, methodsInInterface } from './config.js';\nimport { Registry } from './registry.js';\nimport { namehash } from './utils.js';\n\n//  Default public resolver\n//  https://github.com/ensdomains/resolvers/blob/master/contracts/PublicResolver.sol\n\nexport class Resolver {\n\tprivate readonly registry: Registry;\n\n\tpublic constructor(registry: Registry) {\n\t\tthis.registry = registry;\n\t}\n\n\tprivate async getResolverContractAdapter(ENSName: string) {\n\t\t//  TODO : (Future 4.1.0 TDB) cache resolver contract if frequently queried same ENS name, refresh cache based on TTL and usage, also limit cache size, optional cache with a flag\n\t\treturn this.registry.getResolver(ENSName);\n\t}\n\n\t//  https://eips.ethereum.org/EIPS/eip-165\n\t// eslint-disable-next-line class-methods-use-this\n\tpublic async checkInterfaceSupport(\n\t\tresolverContract: Contract<typeof PublicResolverAbi>,\n\t\tmethodName: string,\n\t) {\n\t\tif (isNullish(interfaceIds[methodName]))\n\t\t\tthrow new ResolverMethodMissingError(\n\t\t\t\tresolverContract.options.address ?? '',\n\t\t\t\tmethodName,\n\t\t\t);\n\n\t\tconst supported = await resolverContract.methods\n\t\t\t.supportsInterface(interfaceIds[methodName])\n\t\t\t.call();\n\n\t\tif (!supported)\n\t\t\tthrow new ResolverMethodMissingError(\n\t\t\t\tresolverContract.options.address ?? '',\n\t\t\t\tmethodName,\n\t\t\t);\n\t}\n\n\tpublic async supportsInterface(ENSName: string, interfaceId: string) {\n\t\tconst resolverContract = await this.getResolverContractAdapter(ENSName);\n\n\t\tlet interfaceIdParam = interfaceId;\n\n\t\tif (!isHexStrict(interfaceIdParam)) {\n\t\t\tinterfaceIdParam = sha3(interfaceId) ?? '';\n\n\t\t\tif (interfaceId === '') throw new Error('Invalid interface Id');\n\n\t\t\tinterfaceIdParam = interfaceIdParam.slice(0, 10);\n\t\t}\n\n\t\treturn resolverContract.methods.supportsInterface(interfaceIdParam).call();\n\t}\n\n\t// eslint-disable-next-line @typescript-eslint/no-inferrable-types\n\tpublic async getAddress(ENSName: string, coinType: number = 60) {\n\t\tconst resolverContract = await this.getResolverContractAdapter(ENSName);\n\n\t\tawait this.checkInterfaceSupport(resolverContract, methodsInInterface.addr);\n\n\t\treturn resolverContract.methods.addr(namehash(ENSName), coinType).call();\n\t}\n\n\tpublic async getPubkey(ENSName: string) {\n\t\tconst resolverContract = await this.getResolverContractAdapter(ENSName);\n\n\t\tawait this.checkInterfaceSupport(resolverContract, methodsInInterface.pubkey);\n\n\t\treturn resolverContract.methods.pubkey(namehash(ENSName)).call();\n\t}\n\n\tpublic async getContenthash(ENSName: string) {\n\t\tconst resolverContract = await this.getResolverContractAdapter(ENSName);\n\n\t\tawait this.checkInterfaceSupport(resolverContract, methodsInInterface.contenthash);\n\n\t\treturn resolverContract.methods.contenthash(namehash(ENSName)).call();\n\t}\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}