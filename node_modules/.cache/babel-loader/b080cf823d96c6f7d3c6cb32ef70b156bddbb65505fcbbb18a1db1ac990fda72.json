{"ast":null,"code":"/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport { Web3ContractError } from 'web3-errors';\nimport { isNullish, mergeDeep, toHex } from 'web3-utils';\nimport { encodeMethodABI } from './encoding.js';\nexport const getSendTxParams = _ref => {\n  let {\n    abi,\n    params,\n    options,\n    contractOptions\n  } = _ref;\n  var _a, _b;\n  const deploymentCall = (_b = (_a = options === null || options === void 0 ? void 0 : options.input) !== null && _a !== void 0 ? _a : options === null || options === void 0 ? void 0 : options.data) !== null && _b !== void 0 ? _b : contractOptions.input;\n  if (!deploymentCall && !(options === null || options === void 0 ? void 0 : options.to) && !contractOptions.address) {\n    throw new Web3ContractError('Contract address not specified');\n  }\n  if (!(options === null || options === void 0 ? void 0 : options.from) && !contractOptions.from) {\n    throw new Web3ContractError('Contract \"from\" address not specified');\n  }\n  let txParams = mergeDeep({\n    to: contractOptions.address,\n    gas: contractOptions.gas,\n    gasPrice: contractOptions.gasPrice,\n    from: contractOptions.from,\n    input: contractOptions.input,\n    maxPriorityFeePerGas: contractOptions.maxPriorityFeePerGas,\n    maxFeePerGas: contractOptions.maxFeePerGas\n  }, options);\n  if (!txParams.input || abi.type === 'constructor') {\n    txParams = Object.assign(Object.assign({}, txParams), {\n      input: encodeMethodABI(abi, params, txParams.input)\n    });\n  }\n  return txParams;\n};\nexport const getEthTxCallParams = _ref2 => {\n  let {\n    abi,\n    params,\n    options,\n    contractOptions\n  } = _ref2;\n  if (!(options === null || options === void 0 ? void 0 : options.to) && !contractOptions.address) {\n    throw new Web3ContractError('Contract address not specified');\n  }\n  let txParams = mergeDeep({\n    to: contractOptions.address,\n    gas: contractOptions.gas,\n    gasPrice: contractOptions.gasPrice,\n    from: contractOptions.from,\n    input: contractOptions.input,\n    maxPriorityFeePerGas: contractOptions.maxPriorityFeePerGas,\n    maxFeePerGas: contractOptions.maxFeePerGas\n  }, options);\n  txParams = Object.assign(Object.assign({}, txParams), {\n    input: encodeMethodABI(abi, params, txParams.input ? toHex(txParams.input) : undefined)\n  });\n  return txParams;\n};\nexport const getEstimateGasParams = _ref3 => {\n  let {\n    abi,\n    params,\n    options,\n    contractOptions\n  } = _ref3;\n  let txParams = mergeDeep({\n    to: contractOptions.address,\n    gas: contractOptions.gas,\n    gasPrice: contractOptions.gasPrice,\n    from: contractOptions.from,\n    input: contractOptions.input\n  }, options);\n  txParams = Object.assign(Object.assign({}, txParams), {\n    input: encodeMethodABI(abi, params, txParams.input ? toHex(txParams.input) : undefined)\n  });\n  return txParams;\n};\nexport const isContractInitOptions = options => typeof options === 'object' && !isNullish(options) && ['input', 'data', 'from', 'gas', 'gasPrice', 'gasLimit', 'address', 'jsonInterface', 'syncWithContext'].some(key => key in options);\nexport const isWeb3ContractContext = options => typeof options === 'object' && !isNullish(options) && !isContractInitOptions(options);\nexport const getCreateAccessListParams = _ref4 => {\n  let {\n    abi,\n    params,\n    options,\n    contractOptions\n  } = _ref4;\n  if (!(options === null || options === void 0 ? void 0 : options.to) && !contractOptions.address) {\n    throw new Web3ContractError('Contract address not specified');\n  }\n  if (!(options === null || options === void 0 ? void 0 : options.from) && !contractOptions.from) {\n    throw new Web3ContractError('Contract \"from\" address not specified');\n  }\n  let txParams = mergeDeep({\n    to: contractOptions.address,\n    gas: contractOptions.gas,\n    gasPrice: contractOptions.gasPrice,\n    from: contractOptions.from,\n    input: contractOptions.input,\n    maxPriorityFeePerGas: contractOptions.maxPriorityFeePerGas,\n    maxFeePerGas: contractOptions.maxFeePerGas\n  }, options);\n  if (!txParams.input || abi.type === 'constructor') {\n    txParams = Object.assign(Object.assign({}, txParams), {\n      input: encodeMethodABI(abi, params, txParams.input)\n    });\n  }\n  return txParams;\n};","map":{"version":3,"mappings":"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","names":["Web3ContractError","isNullish","mergeDeep","toHex","encodeMethodABI","getSendTxParams","abi","params","options","contractOptions","deploymentCall","input","data","to","address","from","txParams","gas","gasPrice","maxPriorityFeePerGas","maxFeePerGas","type","getEthTxCallParams","undefined","getEstimateGasParams","isContractInitOptions","some","key","isWeb3ContractContext","getCreateAccessListParams"],"sources":["C:\\Users\\rockr\\Desktop\\NFT-MARKETPLACE\\node_modules\\web3-eth-contract\\src\\utils.ts"],"sourcesContent":["ï»¿/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport { Web3ContractError } from 'web3-errors';\nimport {\n\tTransactionForAccessList,\n\tAbiFunctionFragment,\n\tTransactionWithSenderAPI,\n\tTransactionCall,\n\tHexString,\n\tAddress,\n\tNonPayableCallOptions,\n\tPayableCallOptions,\n\tContractInitOptions,\n} from 'web3-types';\nimport { isNullish, mergeDeep, toHex } from 'web3-utils';\nimport { encodeMethodABI } from './encoding.js';\nimport { ContractOptions, Web3ContractContext } from './types.js';\n\nexport const getSendTxParams = ({\n\tabi,\n\tparams,\n\toptions,\n\tcontractOptions,\n}: {\n\tabi: AbiFunctionFragment;\n\tparams: unknown[];\n\toptions?: (PayableCallOptions | NonPayableCallOptions) & {\n\t\tinput?: HexString;\n\t\tdata?: HexString;\n\t\tto?: Address;\n\t};\n\tcontractOptions: ContractOptions;\n}): TransactionCall => {\n\tconst deploymentCall = options?.input ?? options?.data ?? contractOptions.input;\n\n\tif (!deploymentCall && !options?.to && !contractOptions.address) {\n\t\tthrow new Web3ContractError('Contract address not specified');\n\t}\n\n\tif (!options?.from && !contractOptions.from) {\n\t\tthrow new Web3ContractError('Contract \"from\" address not specified');\n\t}\n\n\tlet txParams = mergeDeep(\n\t\t{\n\t\t\tto: contractOptions.address,\n\t\t\tgas: contractOptions.gas,\n\t\t\tgasPrice: contractOptions.gasPrice,\n\t\t\tfrom: contractOptions.from,\n\t\t\tinput: contractOptions.input,\n\t\t\tmaxPriorityFeePerGas: contractOptions.maxPriorityFeePerGas,\n\t\t\tmaxFeePerGas: contractOptions.maxFeePerGas,\n\t\t},\n\t\toptions as unknown as Record<string, unknown>,\n\t) as unknown as TransactionCall;\n\n\tif (!txParams.input || abi.type === 'constructor') {\n\t\ttxParams = {\n\t\t\t...txParams,\n\t\t\tinput: encodeMethodABI(abi, params, txParams.input as HexString),\n\t\t};\n\t}\n\n\treturn txParams;\n};\n\nexport const getEthTxCallParams = ({\n\tabi,\n\tparams,\n\toptions,\n\tcontractOptions,\n}: {\n\tabi: AbiFunctionFragment;\n\tparams: unknown[];\n\toptions?: (PayableCallOptions | NonPayableCallOptions) & { to?: Address };\n\tcontractOptions: ContractOptions;\n}): TransactionCall => {\n\tif (!options?.to && !contractOptions.address) {\n\t\tthrow new Web3ContractError('Contract address not specified');\n\t}\n\n\tlet txParams = mergeDeep(\n\t\t{\n\t\t\tto: contractOptions.address,\n\t\t\tgas: contractOptions.gas,\n\t\t\tgasPrice: contractOptions.gasPrice,\n\t\t\tfrom: contractOptions.from,\n\t\t\tinput: contractOptions.input,\n\t\t\tmaxPriorityFeePerGas: contractOptions.maxPriorityFeePerGas,\n\t\t\tmaxFeePerGas: contractOptions.maxFeePerGas,\n\t\t},\n\t\toptions as unknown as Record<string, unknown>,\n\t) as unknown as TransactionCall;\n\n\ttxParams = {\n\t\t...txParams,\n\t\tinput: encodeMethodABI(abi, params, txParams.input ? toHex(txParams.input) : undefined),\n\t};\n\n\treturn txParams;\n};\n\nexport const getEstimateGasParams = ({\n\tabi,\n\tparams,\n\toptions,\n\tcontractOptions,\n}: {\n\tabi: AbiFunctionFragment;\n\tparams: unknown[];\n\toptions?: PayableCallOptions | NonPayableCallOptions;\n\tcontractOptions: ContractOptions;\n}): Partial<TransactionWithSenderAPI> => {\n\tlet txParams = mergeDeep(\n\t\t{\n\t\t\tto: contractOptions.address,\n\t\t\tgas: contractOptions.gas,\n\t\t\tgasPrice: contractOptions.gasPrice,\n\t\t\tfrom: contractOptions.from,\n\t\t\tinput: contractOptions.input,\n\t\t},\n\t\toptions as unknown as Record<string, unknown>,\n\t) as unknown as TransactionCall;\n\n\ttxParams = {\n\t\t...txParams,\n\t\tinput: encodeMethodABI(abi, params, txParams.input ? toHex(txParams.input) : undefined),\n\t};\n\n\treturn txParams as TransactionWithSenderAPI;\n};\n\nexport const isContractInitOptions = (options: unknown): options is ContractInitOptions =>\n\ttypeof options === 'object' &&\n\t!isNullish(options) &&\n\t[\n\t\t'input',\n\t\t'data',\n\t\t'from',\n\t\t'gas',\n\t\t'gasPrice',\n\t\t'gasLimit',\n\t\t'address',\n\t\t'jsonInterface',\n\t\t'syncWithContext',\n\t].some(key => key in options);\n\nexport const isWeb3ContractContext = (options: unknown): options is Web3ContractContext =>\n\ttypeof options === 'object' && !isNullish(options) && !isContractInitOptions(options);\n\nexport const getCreateAccessListParams = ({\n\tabi,\n\tparams,\n\toptions,\n\tcontractOptions,\n}: {\n\tabi: AbiFunctionFragment;\n\tparams: unknown[];\n\toptions?: (PayableCallOptions | NonPayableCallOptions) & { to?: Address };\n\tcontractOptions: ContractOptions;\n}): TransactionForAccessList => {\n\tif (!options?.to && !contractOptions.address) {\n\t\tthrow new Web3ContractError('Contract address not specified');\n\t}\n\n\tif (!options?.from && !contractOptions.from) {\n\t\tthrow new Web3ContractError('Contract \"from\" address not specified');\n\t}\n\n\tlet txParams = mergeDeep(\n\t\t{\n\t\t\tto: contractOptions.address,\n\t\t\tgas: contractOptions.gas,\n\t\t\tgasPrice: contractOptions.gasPrice,\n\t\t\tfrom: contractOptions.from,\n\t\t\tinput: contractOptions.input,\n\t\t\tmaxPriorityFeePerGas: contractOptions.maxPriorityFeePerGas,\n\t\t\tmaxFeePerGas: contractOptions.maxFeePerGas,\n\t\t},\n\t\toptions as unknown as Record<string, unknown>,\n\t) as unknown as TransactionForAccessList;\n\n\tif (!txParams.input || abi.type === 'constructor') {\n\t\ttxParams = {\n\t\t\t...txParams,\n\t\t\tinput: encodeMethodABI(abi, params, txParams.input as HexString),\n\t\t};\n\t}\n\n\treturn txParams;\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}