{"ast":null,"code":"/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport { FormatterError } from 'web3-errors';\nimport { Iban } from 'web3-eth-iban';\nimport { BlockTags } from 'web3-types';\nimport { fromUtf8, hexToNumber, hexToNumberString, isAddress, isHexStrict, mergeDeep, numberToHex, sha3Raw, toChecksumAddress, toNumber, toUtf8, utf8ToHex } from 'web3-utils';\nimport { isBlockTag, isHex, isNullish } from 'web3-validator';\n/* eslint-disable deprecation/deprecation */\n/**\n * @deprecated Use format function from web3-utils package instead\n * Will format the given storage key array values to hex strings.\n */\nexport const inputStorageKeysFormatter = keys => keys.map(num => numberToHex(num));\n/**\n * @deprecated Use format function from web3-utils package instead\n * Will format the given proof response from the node.\n */\nexport const outputProofFormatter = proof => ({\n  address: toChecksumAddress(proof.address),\n  nonce: hexToNumberString(proof.nonce),\n  balance: hexToNumberString(proof.balance)\n});\n/**\n * @deprecated Use format function from web3-utils package instead\n * Should the format output to a big number\n */\nexport const outputBigIntegerFormatter = number => toNumber(number);\n/**\n * @deprecated Use format function from web3-utils package instead\n * Returns the given block number as hex string or the predefined block number 'latest', 'pending', 'earliest', 'genesis'\n */\nexport const inputBlockNumberFormatter = blockNumber => {\n  if (isNullish(blockNumber)) {\n    return undefined;\n  }\n  if (typeof blockNumber === 'string' && isBlockTag(blockNumber)) {\n    return blockNumber;\n  }\n  if (blockNumber === 'genesis') {\n    return '0x0';\n  }\n  if (typeof blockNumber === 'string' && isHexStrict(blockNumber)) {\n    return blockNumber.toLowerCase();\n  }\n  return numberToHex(blockNumber);\n};\n/**\n * @deprecated Use format function from web3-utils package instead\n * Returns the given block number as hex string or does return the defaultBlock property of the current module\n */\nexport const inputDefaultBlockNumberFormatter = (blockNumber, defaultBlock) => {\n  if (!blockNumber) {\n    return inputBlockNumberFormatter(defaultBlock);\n  }\n  return inputBlockNumberFormatter(blockNumber);\n};\n/**\n * @deprecated Use format function from web3-utils package instead\n * @param address\n */\nexport const inputAddressFormatter = address => {\n  if (Iban.isValid(address) && Iban.isDirect(address)) {\n    const iban = new Iban(address);\n    return iban.toAddress().toLowerCase();\n  }\n  if (isAddress(address)) {\n    return `0x${address.toLowerCase().replace('0x', '')}`;\n  }\n  throw new FormatterError(`Provided address ${address} is invalid, the capitalization checksum test failed, or it's an indirect IBAN address which can't be converted.`);\n};\n/**\n * @deprecated Use format function from web3-utils package instead\n * Formats the input of a transaction and converts all values to HEX\n */\nexport const txInputOptionsFormatter = options => {\n  var _a;\n  const modifiedOptions = Object.assign({}, options);\n  if (options.to) {\n    // it might be contract creation\n    modifiedOptions.to = inputAddressFormatter(options.to);\n  }\n  if (options.data && options.input) {\n    throw new FormatterError('You can\\'t have \"data\" and \"input\" as properties of transactions at the same time, please use either \"data\" or \"input\" instead.');\n  }\n  if (!options.input && options.data) {\n    modifiedOptions.input = options.data;\n    delete modifiedOptions.data;\n  }\n  if (options.input && !options.input.startsWith('0x')) {\n    modifiedOptions.input = `0x${options.input}`;\n  }\n  if (modifiedOptions.input && !isHexStrict(modifiedOptions.input)) {\n    throw new FormatterError('The input field must be HEX encoded data.');\n  }\n  // allow both\n  if (options.gas || options.gasLimit) {\n    modifiedOptions.gas = toNumber((_a = options.gas) !== null && _a !== void 0 ? _a : options.gasLimit);\n  }\n  if (options.maxPriorityFeePerGas || options.maxFeePerGas) {\n    delete modifiedOptions.gasPrice;\n  }\n  ['gasPrice', 'gas', 'value', 'maxPriorityFeePerGas', 'maxFeePerGas', 'nonce', 'chainId'].filter(key => !isNullish(modifiedOptions[key])).forEach(key => {\n    modifiedOptions[key] = numberToHex(modifiedOptions[key]);\n  });\n  return modifiedOptions;\n};\n/**\n * @deprecated Use format function from web3-utils package instead\n * Formats the input of a transaction and converts all values to HEX\n */\nexport const inputCallFormatter = (options, defaultAccount) => {\n  var _a;\n  const opts = txInputOptionsFormatter(options);\n  const from = (_a = opts.from) !== null && _a !== void 0 ? _a : defaultAccount;\n  if (from) {\n    opts.from = inputAddressFormatter(from);\n  }\n  return opts;\n};\n/**\n * @deprecated Use format function from web3-utils package instead\n * Formats the input of a transaction and converts all values to HEX\n */\nexport const inputTransactionFormatter = (options, defaultAccount) => {\n  var _a;\n  const opts = txInputOptionsFormatter(options);\n  // check from, only if not number, or object\n  if (!(typeof opts.from === 'number') && !(!!opts.from && typeof opts.from === 'object')) {\n    opts.from = (_a = opts.from) !== null && _a !== void 0 ? _a : defaultAccount;\n    if (!options.from && !(typeof options.from === 'number')) {\n      throw new FormatterError('The send transactions \"from\" field must be defined!');\n    }\n    opts.from = inputAddressFormatter(options.from);\n  }\n  return opts;\n};\n/**\n * @deprecated Use format function from web3-utils package instead\n * Hex encodes the data passed to eth_sign and personal_sign\n */\nexport const inputSignFormatter = data => isHexStrict(data) ? data : utf8ToHex(data);\n/**\n * @deprecated Use format function from web3-utils package instead\n * Formats the output of a transaction to its proper values\n * @function outputTransactionFormatter\n */\nexport const outputTransactionFormatter = tx => {\n  const modifiedTx = Object.assign({}, tx);\n  if (tx.blockNumber) {\n    modifiedTx.blockNumber = hexToNumber(tx.blockNumber);\n  }\n  if (tx.transactionIndex) {\n    modifiedTx.transactionIndex = hexToNumber(tx.transactionIndex);\n  }\n  modifiedTx.nonce = hexToNumber(tx.nonce);\n  modifiedTx.gas = hexToNumber(tx.gas);\n  if (tx.gasPrice) {\n    modifiedTx.gasPrice = outputBigIntegerFormatter(tx.gasPrice);\n  }\n  if (tx.maxFeePerGas) {\n    modifiedTx.maxFeePerGas = outputBigIntegerFormatter(tx.maxFeePerGas);\n  }\n  if (tx.maxPriorityFeePerGas) {\n    modifiedTx.maxPriorityFeePerGas = outputBigIntegerFormatter(tx.maxPriorityFeePerGas);\n  }\n  if (tx.type) {\n    modifiedTx.type = hexToNumber(tx.type);\n  }\n  modifiedTx.value = outputBigIntegerFormatter(tx.value);\n  if (tx.to && isAddress(tx.to)) {\n    // tx.to could be `0x0` or `null` while contract creation\n    modifiedTx.to = toChecksumAddress(tx.to);\n  } else {\n    modifiedTx.to = undefined; // set to `null` if invalid address\n  }\n\n  if (tx.from) {\n    modifiedTx.from = toChecksumAddress(tx.from);\n  }\n  return modifiedTx;\n};\n/**\n * @deprecated Use format function from web3-utils package instead\n * @param topic\n */\n// To align with specification we use the type \"null\" here\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport const inputTopicFormatter = topic => {\n  // Using \"null\" value intentionally for validation\n  // eslint-disable-next-line no-null/no-null\n  if (isNullish(topic)) return null;\n  const value = String(topic);\n  return isHex(value) ? value : fromUtf8(value);\n};\n/**\n * @deprecated Use format function from web3-utils package instead\n * @param filter\n */\nexport const inputLogFormatter = filter => {\n  var _a;\n  const val = isNullish(filter) ? {} : mergeDeep({}, filter);\n  // If options !== undefined, don't blow out existing data\n  if (isNullish(val.fromBlock)) {\n    val.fromBlock = BlockTags.LATEST;\n  }\n  val.fromBlock = inputBlockNumberFormatter(val.fromBlock);\n  if (!isNullish(val.toBlock)) {\n    val.toBlock = inputBlockNumberFormatter(val.toBlock);\n  }\n  // make sure topics, get converted to hex\n  val.topics = (_a = val.topics) !== null && _a !== void 0 ? _a : [];\n  val.topics = val.topics.map(topic => Array.isArray(topic) ? topic.map(inputTopicFormatter) : inputTopicFormatter(topic));\n  if (val.address) {\n    val.address = Array.isArray(val.address) ? val.address.map(addr => inputAddressFormatter(addr)) : inputAddressFormatter(val.address);\n  }\n  return val;\n};\n/**\n * @deprecated Use format function from web3-utils package instead\n * Formats the output of a log\n * @function outputLogFormatter\n */\nexport const outputLogFormatter = log => {\n  const modifiedLog = Object.assign({}, log);\n  const logIndex = typeof log.logIndex === 'string' ? log.logIndex : numberToHex(log.logIndex);\n  // generate a custom log id\n  if (typeof log.blockHash === 'string' && typeof log.transactionHash === 'string') {\n    const shaId = sha3Raw(`${log.blockHash.replace('0x', '')}${log.transactionHash.replace('0x', '')}${logIndex.replace('0x', '')}`);\n    modifiedLog.id = `log_${shaId.replace('0x', '').slice(0, 8)}`;\n  } else if (!log.id) {\n    modifiedLog.id = undefined;\n  }\n  if (log.blockNumber && isHexStrict(log.blockNumber)) {\n    modifiedLog.blockNumber = hexToNumber(log.blockNumber);\n  }\n  if (log.transactionIndex && isHexStrict(log.transactionIndex)) {\n    modifiedLog.transactionIndex = hexToNumber(log.transactionIndex);\n  }\n  if (log.logIndex && isHexStrict(log.logIndex)) {\n    modifiedLog.logIndex = hexToNumber(log.logIndex);\n  }\n  if (log.address) {\n    modifiedLog.address = toChecksumAddress(log.address);\n  }\n  return modifiedLog;\n};\n/**\n * @deprecated Use format function from web3-utils package instead\n * Formats the output of a transaction receipt to its proper values\n */\nexport const outputTransactionReceiptFormatter = receipt => {\n  if (typeof receipt !== 'object') {\n    throw new FormatterError(`Received receipt is invalid: ${String(receipt)}`);\n  }\n  const modifiedReceipt = Object.assign({}, receipt);\n  if (receipt.blockNumber) {\n    modifiedReceipt.blockNumber = hexToNumber(receipt.blockNumber);\n  }\n  if (receipt.transactionIndex) {\n    modifiedReceipt.transactionIndex = hexToNumber(receipt.transactionIndex);\n  }\n  modifiedReceipt.cumulativeGasUsed = hexToNumber(receipt.cumulativeGasUsed);\n  modifiedReceipt.gasUsed = hexToNumber(receipt.gasUsed);\n  if (receipt.logs && Array.isArray(receipt.logs)) {\n    modifiedReceipt.logs = receipt.logs.map(outputLogFormatter);\n  }\n  if (receipt.effectiveGasPrice) {\n    modifiedReceipt.effectiveGasPrice = hexToNumber(receipt.effectiveGasPrice);\n  }\n  if (receipt.contractAddress) {\n    modifiedReceipt.contractAddress = toChecksumAddress(receipt.contractAddress);\n  }\n  if (receipt.status) {\n    modifiedReceipt.status = Boolean(parseInt(receipt.status, 10));\n  }\n  return modifiedReceipt;\n};\n/**\n * @deprecated Use format function from web3-utils package instead\n * Formats the output of a block to its proper values\n * @function outputBlockFormatter\n */\nexport const outputBlockFormatter = block => {\n  const modifiedBlock = Object.assign({}, block);\n  // transform to number\n  modifiedBlock.gasLimit = hexToNumber(block.gasLimit);\n  modifiedBlock.gasUsed = hexToNumber(block.gasUsed);\n  modifiedBlock.size = hexToNumber(block.size);\n  modifiedBlock.timestamp = hexToNumber(block.timestamp);\n  if (block.number) {\n    modifiedBlock.number = hexToNumber(block.number);\n  }\n  if (block.difficulty) {\n    modifiedBlock.difficulty = outputBigIntegerFormatter(block.difficulty);\n  }\n  if (block.totalDifficulty) {\n    modifiedBlock.totalDifficulty = outputBigIntegerFormatter(block.totalDifficulty);\n  }\n  if (block.transactions && Array.isArray(block.transactions)) {\n    modifiedBlock.transactions = block.transactions.map(outputTransactionFormatter);\n  }\n  if (block.miner) {\n    modifiedBlock.miner = toChecksumAddress(block.miner);\n  }\n  if (block.baseFeePerGas) {\n    modifiedBlock.baseFeePerGas = hexToNumber(block.baseFeePerGas);\n  }\n  return modifiedBlock;\n};\n/**\n * @deprecated Use format function from web3-utils package instead\n * Formats the input of a whisper post and converts all values to HEX\n */\nexport const inputPostFormatter = post => {\n  var _a;\n  const modifiedPost = Object.assign({}, post);\n  if (post.ttl) {\n    modifiedPost.ttl = numberToHex(post.ttl);\n  }\n  if (post.workToProve) {\n    modifiedPost.workToProve = numberToHex(post.workToProve);\n  }\n  if (post.priority) {\n    modifiedPost.priority = numberToHex(post.priority);\n  }\n  // fallback\n  if (post.topics && !Array.isArray(post.topics)) {\n    modifiedPost.topics = post.topics ? [post.topics] : [];\n  }\n  // format the following options\n  modifiedPost.topics = (_a = modifiedPost.topics) === null || _a === void 0 ? void 0 : _a.map(topic => topic.startsWith('0x') ? topic : fromUtf8(topic));\n  return modifiedPost;\n};\n/**\n * @deprecated Use format function from web3-utils package instead\n * Formats the output of a received post message\n * @function outputPostFormatter\n */\nexport const outputPostFormatter = post => {\n  var _a;\n  const modifiedPost = Object.assign({}, post);\n  if (post.expiry) {\n    modifiedPost.expiry = hexToNumber(post.expiry);\n  }\n  if (post.sent) {\n    modifiedPost.sent = hexToNumber(post.sent);\n  }\n  if (post.ttl) {\n    modifiedPost.ttl = hexToNumber(post.ttl);\n  }\n  if (post.workProved) {\n    modifiedPost.workProved = hexToNumber(post.workProved);\n  }\n  // post.payloadRaw = post.payload;\n  // post.payload = utils.hexToAscii(post.payload);\n  // if (utils.isJson(post.payload)) {\n  //     post.payload = JSON.parse(post.payload);\n  // }\n  // format the following options\n  if (!post.topics) {\n    modifiedPost.topics = [];\n  }\n  modifiedPost.topics = (_a = modifiedPost.topics) === null || _a === void 0 ? void 0 : _a.map(toUtf8);\n  return modifiedPost;\n};\n/**\n * @deprecated Use format function from web3-utils package instead\n */\nexport const outputSyncingFormatter = result => {\n  const modifiedResult = Object.assign({}, result);\n  modifiedResult.startingBlock = hexToNumber(result.startingBlock);\n  modifiedResult.currentBlock = hexToNumber(result.currentBlock);\n  modifiedResult.highestBlock = hexToNumber(result.highestBlock);\n  if (result.knownStates) {\n    modifiedResult.knownStates = hexToNumber(result.knownStates);\n  }\n  if (result.pulledStates) {\n    modifiedResult.pulledStates = hexToNumber(result.pulledStates);\n  }\n  return modifiedResult;\n};","map":{"version":3,"mappings":"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","names":["FormatterError","Iban","BlockTags","fromUtf8","hexToNumber","hexToNumberString","isAddress","isHexStrict","mergeDeep","numberToHex","sha3Raw","toChecksumAddress","toNumber","toUtf8","utf8ToHex","isBlockTag","isHex","isNullish","inputStorageKeysFormatter","keys","map","num","outputProofFormatter","proof","address","nonce","balance","outputBigIntegerFormatter","number","inputBlockNumberFormatter","blockNumber","undefined","toLowerCase","inputDefaultBlockNumberFormatter","defaultBlock","inputAddressFormatter","isValid","isDirect","iban","toAddress","replace","txInputOptionsFormatter","options","modifiedOptions","Object","to","data","input","startsWith","gas","gasLimit","maxPriorityFeePerGas","maxFeePerGas","gasPrice","filter","key","forEach","inputCallFormatter","defaultAccount","opts","from","inputTransactionFormatter","inputSignFormatter","outputTransactionFormatter","tx","modifiedTx","transactionIndex","type","value","inputTopicFormatter","topic","String","inputLogFormatter","val","fromBlock","LATEST","toBlock","topics","Array","isArray","addr","outputLogFormatter","log","modifiedLog","logIndex","blockHash","transactionHash","shaId","id","slice","outputTransactionReceiptFormatter","receipt","modifiedReceipt","cumulativeGasUsed","gasUsed","logs","effectiveGasPrice","contractAddress","status","Boolean","parseInt","outputBlockFormatter","block","modifiedBlock","size","timestamp","difficulty","totalDifficulty","transactions","miner","baseFeePerGas","inputPostFormatter","post","modifiedPost","ttl","workToProve","priority","outputPostFormatter","expiry","sent","workProved","outputSyncingFormatter","result","modifiedResult","startingBlock","currentBlock","highestBlock","knownStates","pulledStates"],"sources":["C:\\Users\\rockr\\Desktop\\NFT-MARKETPLACE\\node_modules\\web3-core\\src\\formatters.ts"],"sourcesContent":["﻿/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport { FormatterError } from 'web3-errors';\nimport { Iban } from 'web3-eth-iban';\nimport {\n\tBlockTags,\n\tFilter,\n\tNumbers,\n\tTopic,\n\tBlockInput,\n\tBlockOutput,\n\tLogsInput,\n\tLogsOutput,\n\tMutable,\n\tPostInput,\n\tPostOutput,\n\tProof,\n\tReceiptInput,\n\tReceiptOutput,\n\tSyncInput,\n\tSyncOutput,\n\tTransactionInput,\n\tTransactionOutput,\n} from 'web3-types';\nimport {\n\tfromUtf8,\n\thexToNumber,\n\thexToNumberString,\n\tisAddress,\n\tisHexStrict,\n\tmergeDeep,\n\tnumberToHex,\n\tsha3Raw,\n\ttoChecksumAddress,\n\ttoNumber,\n\ttoUtf8,\n\tutf8ToHex,\n} from 'web3-utils';\nimport { isBlockTag, isHex, isNullish } from 'web3-validator';\n\n/* eslint-disable deprecation/deprecation */\n/**\n * @deprecated Use format function from web3-utils package instead\n * Will format the given storage key array values to hex strings.\n */\nexport const inputStorageKeysFormatter = (keys: Array<string>) => keys.map(num => numberToHex(num));\n\n/**\n * @deprecated Use format function from web3-utils package instead\n * Will format the given proof response from the node.\n */\nexport const outputProofFormatter = (proof: Proof): Proof => ({\n\taddress: toChecksumAddress(proof.address),\n\tnonce: hexToNumberString(proof.nonce),\n\tbalance: hexToNumberString(proof.balance),\n});\n\n/**\n * @deprecated Use format function from web3-utils package instead\n * Should the format output to a big number\n */\nexport const outputBigIntegerFormatter = (number: Numbers) => toNumber(number);\n\n/**\n * @deprecated Use format function from web3-utils package instead\n * Returns the given block number as hex string or the predefined block number 'latest', 'pending', 'earliest', 'genesis'\n */\nexport const inputBlockNumberFormatter = (blockNumber: Numbers | undefined) => {\n\tif (isNullish(blockNumber)) {\n\t\treturn undefined;\n\t}\n\n\tif (typeof blockNumber === 'string' && isBlockTag(blockNumber)) {\n\t\treturn blockNumber;\n\t}\n\n\tif (blockNumber === 'genesis') {\n\t\treturn '0x0';\n\t}\n\n\tif (typeof blockNumber === 'string' && isHexStrict(blockNumber)) {\n\t\treturn blockNumber.toLowerCase();\n\t}\n\n\treturn numberToHex(blockNumber);\n};\n\n/**\n * @deprecated Use format function from web3-utils package instead\n * Returns the given block number as hex string or does return the defaultBlock property of the current module\n */\nexport const inputDefaultBlockNumberFormatter = (\n\tblockNumber: Numbers | undefined,\n\tdefaultBlock: Numbers,\n) => {\n\tif (!blockNumber) {\n\t\treturn inputBlockNumberFormatter(defaultBlock);\n\t}\n\n\treturn inputBlockNumberFormatter(blockNumber);\n};\n\n/**\n * @deprecated Use format function from web3-utils package instead\n * @param address\n */\nexport const inputAddressFormatter = (address: string): string | never => {\n\tif (Iban.isValid(address) && Iban.isDirect(address)) {\n\t\tconst iban = new Iban(address);\n\n\t\treturn iban.toAddress().toLowerCase();\n\t}\n\n\tif (isAddress(address)) {\n\t\treturn `0x${address.toLowerCase().replace('0x', '')}`;\n\t}\n\n\tthrow new FormatterError(\n\t\t`Provided address ${address} is invalid, the capitalization checksum test failed, or it's an indirect IBAN address which can't be converted.`,\n\t);\n};\n\n/**\n * @deprecated Use format function from web3-utils package instead\n * Formats the input of a transaction and converts all values to HEX\n */\nexport const txInputOptionsFormatter = (options: TransactionInput): Mutable<TransactionOutput> => {\n\tconst modifiedOptions = { ...options } as unknown as Mutable<TransactionOutput>;\n\n\tif (options.to) {\n\t\t// it might be contract creation\n\t\tmodifiedOptions.to = inputAddressFormatter(options.to);\n\t}\n\n\tif (options.data && options.input) {\n\t\tthrow new FormatterError(\n\t\t\t'You can\\'t have \"data\" and \"input\" as properties of transactions at the same time, please use either \"data\" or \"input\" instead.',\n\t\t);\n\t}\n\n\tif (!options.input && options.data) {\n\t\tmodifiedOptions.input = options.data;\n\t\tdelete modifiedOptions.data;\n\t}\n\n\tif (options.input && !options.input.startsWith('0x')) {\n\t\tmodifiedOptions.input = `0x${options.input}`;\n\t}\n\n\tif (modifiedOptions.input && !isHexStrict(modifiedOptions.input)) {\n\t\tthrow new FormatterError('The input field must be HEX encoded data.');\n\t}\n\n\t// allow both\n\tif (options.gas || options.gasLimit) {\n\t\tmodifiedOptions.gas = toNumber(options.gas ?? options.gasLimit);\n\t}\n\n\tif (options.maxPriorityFeePerGas || options.maxFeePerGas) {\n\t\tdelete modifiedOptions.gasPrice;\n\t}\n\n\t['gasPrice', 'gas', 'value', 'maxPriorityFeePerGas', 'maxFeePerGas', 'nonce', 'chainId']\n\t\t.filter(key => !isNullish(modifiedOptions[key]))\n\t\t.forEach(key => {\n\t\t\tmodifiedOptions[key] = numberToHex(modifiedOptions[key] as Numbers);\n\t\t});\n\n\treturn modifiedOptions as TransactionOutput;\n};\n\n/**\n * @deprecated Use format function from web3-utils package instead\n * Formats the input of a transaction and converts all values to HEX\n */\nexport const inputCallFormatter = (options: TransactionInput, defaultAccount?: string) => {\n\tconst opts = txInputOptionsFormatter(options);\n\n\tconst from = opts.from ?? defaultAccount;\n\n\tif (from) {\n\t\topts.from = inputAddressFormatter(from);\n\t}\n\n\treturn opts;\n};\n\n/**\n * @deprecated Use format function from web3-utils package instead\n * Formats the input of a transaction and converts all values to HEX\n */\nexport const inputTransactionFormatter = (options: TransactionInput, defaultAccount?: string) => {\n\tconst opts = txInputOptionsFormatter(options);\n\n\t// check from, only if not number, or object\n\tif (!(typeof opts.from === 'number') && !(!!opts.from && typeof opts.from === 'object')) {\n\t\topts.from = opts.from ?? defaultAccount;\n\n\t\tif (!options.from && !(typeof options.from === 'number')) {\n\t\t\tthrow new FormatterError('The send transactions \"from\" field must be defined!');\n\t\t}\n\n\t\topts.from = inputAddressFormatter(options.from);\n\t}\n\n\treturn opts;\n};\n\n/**\n * @deprecated Use format function from web3-utils package instead\n * Hex encodes the data passed to eth_sign and personal_sign\n */\nexport const inputSignFormatter = (data: string) => (isHexStrict(data) ? data : utf8ToHex(data));\n\n/**\n * @deprecated Use format function from web3-utils package instead\n * Formats the output of a transaction to its proper values\n * @function outputTransactionFormatter\n */\nexport const outputTransactionFormatter = (tx: TransactionInput): TransactionOutput => {\n\tconst modifiedTx = { ...tx } as unknown as Mutable<TransactionOutput>;\n\n\tif (tx.blockNumber) {\n\t\tmodifiedTx.blockNumber = hexToNumber(tx.blockNumber);\n\t}\n\n\tif (tx.transactionIndex) {\n\t\tmodifiedTx.transactionIndex = hexToNumber(tx.transactionIndex);\n\t}\n\n\tmodifiedTx.nonce = hexToNumber(tx.nonce);\n\tmodifiedTx.gas = hexToNumber(tx.gas);\n\n\tif (tx.gasPrice) {\n\t\tmodifiedTx.gasPrice = outputBigIntegerFormatter(tx.gasPrice);\n\t}\n\n\tif (tx.maxFeePerGas) {\n\t\tmodifiedTx.maxFeePerGas = outputBigIntegerFormatter(tx.maxFeePerGas);\n\t}\n\n\tif (tx.maxPriorityFeePerGas) {\n\t\tmodifiedTx.maxPriorityFeePerGas = outputBigIntegerFormatter(tx.maxPriorityFeePerGas);\n\t}\n\n\tif (tx.type) {\n\t\tmodifiedTx.type = hexToNumber(tx.type);\n\t}\n\n\tmodifiedTx.value = outputBigIntegerFormatter(tx.value);\n\n\tif (tx.to && isAddress(tx.to)) {\n\t\t// tx.to could be `0x0` or `null` while contract creation\n\t\tmodifiedTx.to = toChecksumAddress(tx.to);\n\t} else {\n\t\tmodifiedTx.to = undefined; // set to `null` if invalid address\n\t}\n\n\tif (tx.from) {\n\t\tmodifiedTx.from = toChecksumAddress(tx.from);\n\t}\n\n\treturn modifiedTx;\n};\n\n/**\n * @deprecated Use format function from web3-utils package instead\n * @param topic\n */\n// To align with specification we use the type \"null\" here\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport const inputTopicFormatter = (topic: Topic): Topic | null => {\n\t// Using \"null\" value intentionally for validation\n\t// eslint-disable-next-line no-null/no-null\n\tif (isNullish(topic)) return null;\n\n\tconst value = String(topic);\n\n\treturn isHex(value) ? value : fromUtf8(value);\n};\n\n/**\n * @deprecated Use format function from web3-utils package instead\n * @param filter\n */\nexport const inputLogFormatter = (filter: Filter) => {\n\tconst val: Mutable<Filter> = isNullish(filter)\n\t\t? {}\n\t\t: mergeDeep({}, filter as Record<string, unknown>);\n\n\t// If options !== undefined, don't blow out existing data\n\tif (isNullish(val.fromBlock)) {\n\t\tval.fromBlock = BlockTags.LATEST;\n\t}\n\n\tval.fromBlock = inputBlockNumberFormatter(val.fromBlock);\n\n\tif (!isNullish(val.toBlock)) {\n\t\tval.toBlock = inputBlockNumberFormatter(val.toBlock);\n\t}\n\n\t// make sure topics, get converted to hex\n\tval.topics = val.topics ?? [];\n\tval.topics = val.topics.map(topic =>\n\t\tArray.isArray(topic)\n\t\t\t? (topic.map(inputTopicFormatter) as Topic[])\n\t\t\t: inputTopicFormatter(topic as Topic),\n\t);\n\n\tif (val.address) {\n\t\tval.address = Array.isArray(val.address)\n\t\t\t? val.address.map(addr => inputAddressFormatter(addr))\n\t\t\t: inputAddressFormatter(val.address);\n\t}\n\n\treturn val as Filter;\n};\n\n/**\n * @deprecated Use format function from web3-utils package instead\n * Formats the output of a log\n * @function outputLogFormatter\n */\nexport const outputLogFormatter = (log: Partial<LogsInput>): LogsOutput => {\n\tconst modifiedLog = { ...log } as unknown as Mutable<LogsOutput>;\n\n\tconst logIndex =\n\t\ttypeof log.logIndex === 'string'\n\t\t\t? log.logIndex\n\t\t\t: numberToHex(log.logIndex as unknown as number);\n\n\t// generate a custom log id\n\tif (typeof log.blockHash === 'string' && typeof log.transactionHash === 'string') {\n\t\tconst shaId = sha3Raw(\n\t\t\t`${log.blockHash.replace('0x', '')}${log.transactionHash.replace(\n\t\t\t\t'0x',\n\t\t\t\t'',\n\t\t\t)}${logIndex.replace('0x', '')}`,\n\t\t);\n\t\tmodifiedLog.id = `log_${shaId.replace('0x', '').slice(0, 8)}`;\n\t} else if (!log.id) {\n\t\tmodifiedLog.id = undefined;\n\t}\n\n\tif (log.blockNumber && isHexStrict(log.blockNumber)) {\n\t\tmodifiedLog.blockNumber = hexToNumber(log.blockNumber);\n\t}\n\tif (log.transactionIndex && isHexStrict(log.transactionIndex)) {\n\t\tmodifiedLog.transactionIndex = hexToNumber(log.transactionIndex);\n\t}\n\n\tif (log.logIndex && isHexStrict(log.logIndex)) {\n\t\tmodifiedLog.logIndex = hexToNumber(log.logIndex);\n\t}\n\n\tif (log.address) {\n\t\tmodifiedLog.address = toChecksumAddress(log.address);\n\t}\n\n\treturn modifiedLog;\n};\n\n/**\n * @deprecated Use format function from web3-utils package instead\n * Formats the output of a transaction receipt to its proper values\n */\nexport const outputTransactionReceiptFormatter = (receipt: ReceiptInput): ReceiptOutput => {\n\tif (typeof receipt !== 'object') {\n\t\tthrow new FormatterError(`Received receipt is invalid: ${String(receipt)}`);\n\t}\n\tconst modifiedReceipt = { ...receipt } as unknown as Mutable<ReceiptOutput>;\n\n\tif (receipt.blockNumber) {\n\t\tmodifiedReceipt.blockNumber = hexToNumber(receipt.blockNumber);\n\t}\n\n\tif (receipt.transactionIndex) {\n\t\tmodifiedReceipt.transactionIndex = hexToNumber(receipt.transactionIndex);\n\t}\n\n\tmodifiedReceipt.cumulativeGasUsed = hexToNumber(receipt.cumulativeGasUsed);\n\tmodifiedReceipt.gasUsed = hexToNumber(receipt.gasUsed);\n\n\tif (receipt.logs && Array.isArray(receipt.logs)) {\n\t\tmodifiedReceipt.logs = receipt.logs.map(outputLogFormatter);\n\t}\n\n\tif (receipt.effectiveGasPrice) {\n\t\tmodifiedReceipt.effectiveGasPrice = hexToNumber(receipt.effectiveGasPrice);\n\t}\n\n\tif (receipt.contractAddress) {\n\t\tmodifiedReceipt.contractAddress = toChecksumAddress(receipt.contractAddress);\n\t}\n\n\tif (receipt.status) {\n\t\tmodifiedReceipt.status = Boolean(parseInt(receipt.status, 10));\n\t}\n\n\treturn modifiedReceipt;\n};\n\n/**\n * @deprecated Use format function from web3-utils package instead\n * Formats the output of a block to its proper values\n * @function outputBlockFormatter\n */\nexport const outputBlockFormatter = (block: BlockInput): BlockOutput => {\n\tconst modifiedBlock = { ...block } as unknown as Mutable<BlockOutput>;\n\n\t// transform to number\n\tmodifiedBlock.gasLimit = hexToNumber(block.gasLimit);\n\tmodifiedBlock.gasUsed = hexToNumber(block.gasUsed);\n\tmodifiedBlock.size = hexToNumber(block.size);\n\tmodifiedBlock.timestamp = hexToNumber(block.timestamp);\n\n\tif (block.number) {\n\t\tmodifiedBlock.number = hexToNumber(block.number);\n\t}\n\n\tif (block.difficulty) {\n\t\tmodifiedBlock.difficulty = outputBigIntegerFormatter(block.difficulty);\n\t}\n\n\tif (block.totalDifficulty) {\n\t\tmodifiedBlock.totalDifficulty = outputBigIntegerFormatter(block.totalDifficulty);\n\t}\n\n\tif (block.transactions && Array.isArray(block.transactions)) {\n\t\tmodifiedBlock.transactions = block.transactions.map(outputTransactionFormatter);\n\t}\n\n\tif (block.miner) {\n\t\tmodifiedBlock.miner = toChecksumAddress(block.miner);\n\t}\n\n\tif (block.baseFeePerGas) {\n\t\tmodifiedBlock.baseFeePerGas = hexToNumber(block.baseFeePerGas);\n\t}\n\n\treturn modifiedBlock;\n};\n\n/**\n * @deprecated Use format function from web3-utils package instead\n * Formats the input of a whisper post and converts all values to HEX\n */\nexport const inputPostFormatter = (post: PostOutput): PostInput => {\n\tconst modifiedPost = { ...post } as unknown as Mutable<PostInput>;\n\n\tif (post.ttl) {\n\t\tmodifiedPost.ttl = numberToHex(post.ttl);\n\t}\n\n\tif (post.workToProve) {\n\t\tmodifiedPost.workToProve = numberToHex(post.workToProve);\n\t}\n\n\tif (post.priority) {\n\t\tmodifiedPost.priority = numberToHex(post.priority);\n\t}\n\n\t// fallback\n\tif (post.topics && !Array.isArray(post.topics)) {\n\t\tmodifiedPost.topics = post.topics ? [post.topics] : [];\n\t}\n\n\t// format the following options\n\tmodifiedPost.topics = modifiedPost.topics?.map(topic =>\n\t\ttopic.startsWith('0x') ? topic : fromUtf8(topic),\n\t);\n\n\treturn modifiedPost;\n};\n\n/**\n * @deprecated Use format function from web3-utils package instead\n * Formats the output of a received post message\n * @function outputPostFormatter\n */\nexport const outputPostFormatter = (post: PostInput): PostOutput => {\n\tconst modifiedPost = { ...post } as unknown as Mutable<PostOutput>;\n\n\tif (post.expiry) {\n\t\tmodifiedPost.expiry = hexToNumber(post.expiry);\n\t}\n\n\tif (post.sent) {\n\t\tmodifiedPost.sent = hexToNumber(post.sent);\n\t}\n\n\tif (post.ttl) {\n\t\tmodifiedPost.ttl = hexToNumber(post.ttl);\n\t}\n\n\tif (post.workProved) {\n\t\tmodifiedPost.workProved = hexToNumber(post.workProved);\n\t}\n\n\t// post.payloadRaw = post.payload;\n\t// post.payload = utils.hexToAscii(post.payload);\n\n\t// if (utils.isJson(post.payload)) {\n\t//     post.payload = JSON.parse(post.payload);\n\t// }\n\n\t// format the following options\n\tif (!post.topics) {\n\t\tmodifiedPost.topics = [];\n\t}\n\n\tmodifiedPost.topics = modifiedPost.topics?.map(toUtf8);\n\n\treturn modifiedPost;\n};\n\n/**\n * @deprecated Use format function from web3-utils package instead\n */\nexport const outputSyncingFormatter = (result: SyncInput): SyncOutput => {\n\tconst modifiedResult = { ...result } as unknown as Mutable<SyncOutput>;\n\n\tmodifiedResult.startingBlock = hexToNumber(result.startingBlock);\n\tmodifiedResult.currentBlock = hexToNumber(result.currentBlock);\n\tmodifiedResult.highestBlock = hexToNumber(result.highestBlock);\n\n\tif (result.knownStates) {\n\t\tmodifiedResult.knownStates = hexToNumber(result.knownStates);\n\t}\n\n\tif (result.pulledStates) {\n\t\tmodifiedResult.pulledStates = hexToNumber(result.pulledStates);\n\t}\n\n\treturn modifiedResult;\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}