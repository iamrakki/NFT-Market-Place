[{"C:\\Users\\rockr\\Desktop\\NFT-MARKETPLACE\\src\\index.js":"1","C:\\Users\\rockr\\Desktop\\NFT-MARKETPLACE\\src\\App.js":"2","C:\\Users\\rockr\\Desktop\\NFT-MARKETPLACE\\src\\components\\SellNFT.js":"3","C:\\Users\\rockr\\Desktop\\NFT-MARKETPLACE\\src\\components\\Profile.js":"4","C:\\Users\\rockr\\Desktop\\NFT-MARKETPLACE\\src\\components\\NFTpage.js":"5","C:\\Users\\rockr\\Desktop\\NFT-MARKETPLACE\\src\\components\\Marketplace.js":"6","C:\\Users\\rockr\\Desktop\\NFT-MARKETPLACE\\src\\components\\Navibar.js":"7","C:\\Users\\rockr\\Desktop\\NFT-MARKETPLACE\\src\\components\\NFTTile.js":"8"},{"size":388,"mtime":1694153921251,"results":"9","hashOfConfig":"10"},{"size":3228,"mtime":1694186591498,"results":"11","hashOfConfig":"10"},{"size":6260,"mtime":1694272879852,"results":"12","hashOfConfig":"10"},{"size":3799,"mtime":1694236919675,"results":"13","hashOfConfig":"10"},{"size":5383,"mtime":1694272912278,"results":"14","hashOfConfig":"10"},{"size":2200,"mtime":1694174028515,"results":"15","hashOfConfig":"10"},{"size":2190,"mtime":1694235817366,"results":"16","hashOfConfig":"10"},{"size":863,"mtime":1694153921245,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},"13ymfci",{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"21"},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"21"},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},"C:\\Users\\rockr\\Desktop\\NFT-MARKETPLACE\\src\\index.js",[],[],[],"C:\\Users\\rockr\\Desktop\\NFT-MARKETPLACE\\src\\App.js",[],[],"C:\\Users\\rockr\\Desktop\\NFT-MARKETPLACE\\src\\components\\SellNFT.js",["45"],[],"C:\\Users\\rockr\\Desktop\\NFT-MARKETPLACE\\src\\components\\Profile.js",["46","47"],[],"import { useParams } from 'react-router-dom';\r\nimport axios from \"axios\";\r\nimport { useState } from \"react\";\r\nimport NFTTile from \"./NFTTile\";\r\n\r\nexport default function Profile(props) {\r\n    const [data, updateData] = useState([]);\r\n    const [dataFetched, updateFetched] = useState(false);\r\n    const [address, updateAddress] = useState(\"0x\");\r\n    const [totalPrice, updateTotalPrice] = useState(\"0\");\r\n\r\n    async function getNFTData(tokenId) {\r\n        const ethers = require(\"ethers\");\r\n        let sumPrice = 0;\r\n        let contract = props.contract;\r\n        let transaction = await contract.getMyNFTs();\r\n\r\n        const items = await Promise.all(transaction.map(async i => {\r\n            const tokenURI = await contract.tokenURI(i.tokenId);\r\n\r\n            let meta = await axios(tokenURI, {\r\n                method: 'GET',  // Sending a POST request\r\n                mode: 'cors'\r\n            });\r\n\r\n            meta = meta.data;\r\n            let image = getIPFSGatewayURL(meta.image);\r\n            console.log(\"image url: \" + image);\r\n\r\n            let price = ethers.utils.formatUnits(i.price.toString(), 'ether');\r\n            console.log(\"price\", Number(price))\r\n            let item = {\r\n                price,\r\n                tokenId: i.tokenId.toNumber(),\r\n                seller: i.seller,\r\n                owner: i.owner,\r\n                image: image,\r\n                name: meta.name,\r\n                description: meta.description,\r\n            }\r\n            sumPrice += Number(price);\r\n            return item;\r\n        }))\r\n        console.log(\"sum\", sumPrice)\r\n        updateData(items);\r\n        updateFetched(true);\r\n        updateAddress(props.account);\r\n        updateTotalPrice(sumPrice.toPrecision(3));\r\n    }\r\n\r\n    const params = useParams();\r\n    const tokenId = params.tokenId;\r\n    if (!dataFetched)\r\n        getNFTData(tokenId);\r\n\r\n    const getIPFSGatewayURL = (ipfsURL) => {\r\n        let urlArray = ipfsURL.split(\"/\");\r\n        let ipfsGateWayURL = `https://${urlArray[2]}.ipfs.dweb.link/${urlArray[3]}`;\r\n        return ipfsGateWayURL;\r\n    }\r\n    return (\r\n        <div>\r\n\r\n            <div className=\"text-white text-center  mb-5 fw-semibold fs-3\">\r\n                Wallet Address\r\n                <h3 className=\"text-white text-center  mb-5 fw-normal fs-4\">{props.account}</h3>\r\n            </div>\r\n            <div class=\"container text-center\">\r\n                <div class=\"row\">\r\n                    <div class=\"col\">\r\n                        <div className=\"text-white text-center  mb-5 fw-semibold fs-3\">\r\n                            No. of NFTs\r\n                            <h3 className=\"text-white text-center  mb-5 fw-normal fs-4\">{data.length}</h3>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"col\">\r\n                    </div>\r\n                    <div class=\"col\">\r\n                        <div className=\"text-white text-center  mb-5 fw-semibold fs-3\">\r\n                            Total Value\r\n                            <h3 className=\"text-white text-center  mb-5 fw-normal fs-4\">{totalPrice} MATIC</h3>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"text-white text-center  mb-5 fw-semibold fs-5\">\r\n                Your NFTs\r\n            </div>\r\n            <div class=\"row row-cols-1 row-cols-md-4 g-4 mx-5 text-center\">\r\n                {data.map((value, index) => {\r\n                    return <NFTTile data={value} key={index}></NFTTile>;\r\n                })}\r\n            </div>\r\n            <div className=\"text-white text-center  mb-5 fw-normal fs-5\">\r\n                {data.length == 0 ? \"Oops, No NFT data to display (Are you logged in?)\" : \"\"}\r\n            </div>\r\n        </div>\r\n    )\r\n};","C:\\Users\\rockr\\Desktop\\NFT-MARKETPLACE\\src\\components\\NFTpage.js",["48","49"],[],"C:\\Users\\rockr\\Desktop\\NFT-MARKETPLACE\\src\\components\\Marketplace.js",[],[],"C:\\Users\\rockr\\Desktop\\NFT-MARKETPLACE\\src\\components\\Navibar.js",["50","51"],[],"import { Link } from \"react-router-dom\";\r\nimport { useEffect, useState } from 'react';\r\n\r\nimport Container from 'react-bootstrap/Container';\r\nimport Navbar from 'react-bootstrap/Navbar';\r\nimport Nav from 'react-bootstrap/Nav';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nfunction Navibar(props) {\r\n\r\n    const [connected, toggleConnect] = useState(false);\r\n\r\n    useEffect(() => {\r\n        let val = window.ethereum.isConnected();\r\n        if (val) {\r\n            toggleConnect(val);\r\n        }\r\n    });\r\n\r\n    return (\r\n        <div>\r\n            <Navbar collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\" fixed=\"top\" >\r\n                <Container>\r\n                    <Navbar.Brand><img\r\n                    />{' '}<span className=\"fw-bold\">NFT Marketplace</span></Navbar.Brand>\r\n                    <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\r\n                    <Navbar.Collapse id=\"responsive-navbar-nav\">\r\n                        <Nav className=\"me-auto\">\r\n                            {connected ? (<><Nav.Link as={Link} to=\"/\">Marketplace</Nav.Link>\r\n                                <Nav.Link as={Link} to=\"/sellNFT\">Create Your NFT</Nav.Link>\r\n                                <Nav.Link as={Link} to=\"/profile\">Profile</Nav.Link></>) :\r\n                                (<><Nav.Link as={Link} to=\"/\">Marketplace</Nav.Link>\r\n                                    <Nav.Link as={Link} to=\"/\">Create Your NFT</Nav.Link>\r\n                                    <Nav.Link as={Link} to=\"/\">Profile</Nav.Link></>)}\r\n                        </Nav>\r\n                        <Nav>\r\n                            {props.account ? (<div className='text-white text-bold text-right mr-10 text-sm'>\r\n                                Connected to {props.account.substring(0, 15) + '...'}\r\n                            </div>) : (\r\n                                <Button onClick={props.function} variant=\"success\">Connect Wallet</Button>\r\n                            )}\r\n                        </Nav>\r\n                    </Navbar.Collapse>\r\n\r\n                </Container>\r\n            </Navbar>\r\n            <br /><br /><br /><br />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Navibar;","C:\\Users\\rockr\\Desktop\\NFT-MARKETPLACE\\src\\components\\NFTTile.js",[],[],{"ruleId":"52","severity":1,"message":"53","line":13,"column":12,"nodeType":"54","messageId":"55","endLine":13,"endColumn":20},{"ruleId":"52","severity":1,"message":"56","line":9,"column":12,"nodeType":"54","messageId":"55","endLine":9,"endColumn":19},{"ruleId":"57","severity":1,"message":"58","line":96,"column":30,"nodeType":"59","messageId":"60","endLine":96,"endColumn":32},{"ruleId":"61","severity":1,"message":"62","line":57,"column":8,"nodeType":"63","endLine":57,"endColumn":30,"suggestions":"64"},{"ruleId":"65","severity":1,"message":"66","line":95,"column":29,"nodeType":"67","endLine":95,"endColumn":74},{"ruleId":"61","severity":1,"message":"68","line":13,"column":5,"nodeType":"54","endLine":13,"endColumn":14,"suggestions":"69"},{"ruleId":"65","severity":1,"message":"66","line":24,"column":35,"nodeType":"67","endLine":25,"endColumn":23},"no-unused-vars","'tokenURI' is assigned a value but never used.","Identifier","unusedVar","'address' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getNFTData'. Either include it or remove the dependency array.","ArrayExpression",["70"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","React Hook useEffect contains a call to 'toggleConnect'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [] as a second argument to the useEffect Hook.",["71"],{"desc":"72","fix":"73"},{"desc":"74","fix":"75"},"Update the dependencies array to be: [dataFetched, getNFTData, tokenId]",{"range":"76","text":"77"},"Add dependencies array: []",{"range":"78","text":"79"},[1837,1859],"[dataFetched, getNFTData, tokenId]",[506,506],", []"]